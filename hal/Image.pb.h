// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Image.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Image_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Image_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Image_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Image_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Image_2eproto;
namespace hal {
class ImageInfoMsg;
struct ImageInfoMsgDefaultTypeInternal;
extern ImageInfoMsgDefaultTypeInternal _ImageInfoMsg_default_instance_;
class ImageMsg;
struct ImageMsgDefaultTypeInternal;
extern ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::ImageInfoMsg* Arena::CreateMaybeMessage<::hal::ImageInfoMsg>(Arena*);
template<> ::hal::ImageMsg* Arena::CreateMaybeMessage<::hal::ImageMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

enum Type : int {
  PB_BYTE = 5120,
  PB_UNSIGNED_BYTE = 5121,
  PB_SHORT = 5122,
  PB_UNSIGNED_SHORT = 5123,
  PB_INT = 5124,
  PB_UNSIGNED_INT = 5125,
  PB_FLOAT = 5126,
  PB_DOUBLE = 5130
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = PB_BYTE;
constexpr Type Type_MAX = PB_DOUBLE;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum Format : int {
  PB_LUMINANCE = 6409,
  PB_RGB = 6407,
  PB_RGBA = 6408,
  PB_RAW = 1,
  PB_BGR = 32992,
  PB_BGRA = 32993
};
bool Format_IsValid(int value);
constexpr Format Format_MIN = PB_RAW;
constexpr Format Format_MAX = PB_BGRA;
constexpr int Format_ARRAYSIZE = Format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Format_descriptor();
template<typename T>
inline const std::string& Format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Format_descriptor(), enum_t_value);
}
inline bool Format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Format>(
    Format_descriptor(), name, value);
}
// ===================================================================

class ImageInfoMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.ImageInfoMsg) */ {
 public:
  inline ImageInfoMsg() : ImageInfoMsg(nullptr) {}
  ~ImageInfoMsg() override;
  explicit PROTOBUF_CONSTEXPR ImageInfoMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageInfoMsg(const ImageInfoMsg& from);
  ImageInfoMsg(ImageInfoMsg&& from) noexcept
    : ImageInfoMsg() {
    *this = ::std::move(from);
  }

  inline ImageInfoMsg& operator=(const ImageInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageInfoMsg& operator=(ImageInfoMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageInfoMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageInfoMsg* internal_default_instance() {
    return reinterpret_cast<const ImageInfoMsg*>(
               &_ImageInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageInfoMsg& a, ImageInfoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageInfoMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageInfoMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageInfoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageInfoMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageInfoMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageInfoMsg& from) {
    ImageInfoMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageInfoMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.ImageInfoMsg";
  }
  protected:
  explicit ImageInfoMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExposureFieldNumber = 1,
    kShutterFieldNumber = 2,
    kGainFieldNumber = 3,
    kGammaFieldNumber = 4,
    kBaselineFieldNumber = 50,
    kFocalLengthFieldNumber = 51,
  };
  // optional double exposure = 1;
  bool has_exposure() const;
  private:
  bool _internal_has_exposure() const;
  public:
  void clear_exposure();
  double exposure() const;
  void set_exposure(double value);
  private:
  double _internal_exposure() const;
  void _internal_set_exposure(double value);
  public:

  // optional double shutter = 2;
  bool has_shutter() const;
  private:
  bool _internal_has_shutter() const;
  public:
  void clear_shutter();
  double shutter() const;
  void set_shutter(double value);
  private:
  double _internal_shutter() const;
  void _internal_set_shutter(double value);
  public:

  // optional double gain = 3;
  bool has_gain() const;
  private:
  bool _internal_has_gain() const;
  public:
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // optional double gamma = 4;
  bool has_gamma() const;
  private:
  bool _internal_has_gamma() const;
  public:
  void clear_gamma();
  double gamma() const;
  void set_gamma(double value);
  private:
  double _internal_gamma() const;
  void _internal_set_gamma(double value);
  public:

  // optional double baseline = 50;
  bool has_baseline() const;
  private:
  bool _internal_has_baseline() const;
  public:
  void clear_baseline();
  double baseline() const;
  void set_baseline(double value);
  private:
  double _internal_baseline() const;
  void _internal_set_baseline(double value);
  public:

  // optional double focal_length = 51;
  bool has_focal_length() const;
  private:
  bool _internal_has_focal_length() const;
  public:
  void clear_focal_length();
  double focal_length() const;
  void set_focal_length(double value);
  private:
  double _internal_focal_length() const;
  void _internal_set_focal_length(double value);
  public:

  // @@protoc_insertion_point(class_scope:hal.ImageInfoMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double exposure_;
    double shutter_;
    double gain_;
    double gamma_;
    double baseline_;
    double focal_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Image_2eproto;
};
// -------------------------------------------------------------------

class ImageMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.ImageMsg) */ {
 public:
  inline ImageMsg() : ImageMsg(nullptr) {}
  ~ImageMsg() override;
  explicit PROTOBUF_CONSTEXPR ImageMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMsg(const ImageMsg& from);
  ImageMsg(ImageMsg&& from) noexcept
    : ImageMsg() {
    *this = ::std::move(from);
  }

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMsg& operator=(ImageMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMsg* internal_default_instance() {
    return reinterpret_cast<const ImageMsg*>(
               &_ImageMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageMsg& a, ImageMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageMsg& from) {
    ImageMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.ImageMsg";
  }
  protected:
  explicit ImageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kInfoFieldNumber = 7,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kTimestampFieldNumber = 6,
    kSerialNumberFieldNumber = 8,
    kTypeFieldNumber = 4,
    kFormatFieldNumber = 5,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .hal.ImageInfoMsg info = 7;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::hal::ImageInfoMsg& info() const;
  PROTOBUF_NODISCARD ::hal::ImageInfoMsg* release_info();
  ::hal::ImageInfoMsg* mutable_info();
  void set_allocated_info(::hal::ImageInfoMsg* info);
  private:
  const ::hal::ImageInfoMsg& _internal_info() const;
  ::hal::ImageInfoMsg* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::hal::ImageInfoMsg* info);
  ::hal::ImageInfoMsg* unsafe_arena_release_info();

  // optional uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional double timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional uint64 serial_number = 8;
  bool has_serial_number() const;
  private:
  bool _internal_has_serial_number() const;
  public:
  void clear_serial_number();
  uint64_t serial_number() const;
  void set_serial_number(uint64_t value);
  private:
  uint64_t _internal_serial_number() const;
  void _internal_set_serial_number(uint64_t value);
  public:

  // optional .hal.Type type = 4 [default = PB_UNSIGNED_BYTE];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::hal::Type type() const;
  void set_type(::hal::Type value);
  private:
  ::hal::Type _internal_type() const;
  void _internal_set_type(::hal::Type value);
  public:

  // optional .hal.Format format = 5 [default = PB_RGB];
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::hal::Format format() const;
  void set_format(::hal::Format value);
  private:
  ::hal::Format _internal_format() const;
  void _internal_set_format(::hal::Format value);
  public:

  // @@protoc_insertion_point(class_scope:hal.ImageMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    ::hal::ImageInfoMsg* info_;
    uint32_t width_;
    uint32_t height_;
    double timestamp_;
    uint64_t serial_number_;
    int type_;
    int format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Image_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageInfoMsg

// optional double exposure = 1;
inline bool ImageInfoMsg::_internal_has_exposure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_exposure() const {
  return _internal_has_exposure();
}
inline void ImageInfoMsg::clear_exposure() {
  _impl_.exposure_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ImageInfoMsg::_internal_exposure() const {
  return _impl_.exposure_;
}
inline double ImageInfoMsg::exposure() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.exposure)
  return _internal_exposure();
}
inline void ImageInfoMsg::_internal_set_exposure(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.exposure_ = value;
}
inline void ImageInfoMsg::set_exposure(double value) {
  _internal_set_exposure(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.exposure)
}

// optional double shutter = 2;
inline bool ImageInfoMsg::_internal_has_shutter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_shutter() const {
  return _internal_has_shutter();
}
inline void ImageInfoMsg::clear_shutter() {
  _impl_.shutter_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ImageInfoMsg::_internal_shutter() const {
  return _impl_.shutter_;
}
inline double ImageInfoMsg::shutter() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.shutter)
  return _internal_shutter();
}
inline void ImageInfoMsg::_internal_set_shutter(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.shutter_ = value;
}
inline void ImageInfoMsg::set_shutter(double value) {
  _internal_set_shutter(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.shutter)
}

// optional double gain = 3;
inline bool ImageInfoMsg::_internal_has_gain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_gain() const {
  return _internal_has_gain();
}
inline void ImageInfoMsg::clear_gain() {
  _impl_.gain_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ImageInfoMsg::_internal_gain() const {
  return _impl_.gain_;
}
inline double ImageInfoMsg::gain() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.gain)
  return _internal_gain();
}
inline void ImageInfoMsg::_internal_set_gain(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.gain_ = value;
}
inline void ImageInfoMsg::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.gain)
}

// optional double gamma = 4;
inline bool ImageInfoMsg::_internal_has_gamma() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_gamma() const {
  return _internal_has_gamma();
}
inline void ImageInfoMsg::clear_gamma() {
  _impl_.gamma_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ImageInfoMsg::_internal_gamma() const {
  return _impl_.gamma_;
}
inline double ImageInfoMsg::gamma() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.gamma)
  return _internal_gamma();
}
inline void ImageInfoMsg::_internal_set_gamma(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.gamma_ = value;
}
inline void ImageInfoMsg::set_gamma(double value) {
  _internal_set_gamma(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.gamma)
}

// optional double baseline = 50;
inline bool ImageInfoMsg::_internal_has_baseline() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_baseline() const {
  return _internal_has_baseline();
}
inline void ImageInfoMsg::clear_baseline() {
  _impl_.baseline_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ImageInfoMsg::_internal_baseline() const {
  return _impl_.baseline_;
}
inline double ImageInfoMsg::baseline() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.baseline)
  return _internal_baseline();
}
inline void ImageInfoMsg::_internal_set_baseline(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.baseline_ = value;
}
inline void ImageInfoMsg::set_baseline(double value) {
  _internal_set_baseline(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.baseline)
}

// optional double focal_length = 51;
inline bool ImageInfoMsg::_internal_has_focal_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageInfoMsg::has_focal_length() const {
  return _internal_has_focal_length();
}
inline void ImageInfoMsg::clear_focal_length() {
  _impl_.focal_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ImageInfoMsg::_internal_focal_length() const {
  return _impl_.focal_length_;
}
inline double ImageInfoMsg::focal_length() const {
  // @@protoc_insertion_point(field_get:hal.ImageInfoMsg.focal_length)
  return _internal_focal_length();
}
inline void ImageInfoMsg::_internal_set_focal_length(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.focal_length_ = value;
}
inline void ImageInfoMsg::set_focal_length(double value) {
  _internal_set_focal_length(value);
  // @@protoc_insertion_point(field_set:hal.ImageInfoMsg.focal_length)
}

// -------------------------------------------------------------------

// ImageMsg

// optional uint32 width = 1;
inline bool ImageMsg::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageMsg::has_width() const {
  return _internal_has_width();
}
inline void ImageMsg::clear_width() {
  _impl_.width_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ImageMsg::_internal_width() const {
  return _impl_.width_;
}
inline uint32_t ImageMsg::width() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.width)
  return _internal_width();
}
inline void ImageMsg::_internal_set_width(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void ImageMsg::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.width)
}

// optional uint32 height = 2;
inline bool ImageMsg::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageMsg::has_height() const {
  return _internal_has_height();
}
inline void ImageMsg::clear_height() {
  _impl_.height_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ImageMsg::_internal_height() const {
  return _impl_.height_;
}
inline uint32_t ImageMsg::height() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.height)
  return _internal_height();
}
inline void ImageMsg::_internal_set_height(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_ = value;
}
inline void ImageMsg::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.height)
}

// optional bytes data = 3;
inline bool ImageMsg::_internal_has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageMsg::has_data() const {
  return _internal_has_data();
}
inline void ImageMsg::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageMsg::data() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageMsg::set_data(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hal.ImageMsg.data)
}
inline std::string* ImageMsg::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:hal.ImageMsg.data)
  return _s;
}
inline const std::string& ImageMsg::_internal_data() const {
  return _impl_.data_.Get();
}
inline void ImageMsg::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageMsg::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageMsg::release_data() {
  // @@protoc_insertion_point(field_release:hal.ImageMsg.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ImageMsg::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hal.ImageMsg.data)
}

// optional .hal.Type type = 4 [default = PB_UNSIGNED_BYTE];
inline bool ImageMsg::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ImageMsg::has_type() const {
  return _internal_has_type();
}
inline void ImageMsg::clear_type() {
  _impl_.type_ = 5121;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::hal::Type ImageMsg::_internal_type() const {
  return static_cast< ::hal::Type >(_impl_.type_);
}
inline ::hal::Type ImageMsg::type() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.type)
  return _internal_type();
}
inline void ImageMsg::_internal_set_type(::hal::Type value) {
  assert(::hal::Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.type_ = value;
}
inline void ImageMsg::set_type(::hal::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.type)
}

// optional .hal.Format format = 5 [default = PB_RGB];
inline bool ImageMsg::_internal_has_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ImageMsg::has_format() const {
  return _internal_has_format();
}
inline void ImageMsg::clear_format() {
  _impl_.format_ = 6407;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::hal::Format ImageMsg::_internal_format() const {
  return static_cast< ::hal::Format >(_impl_.format_);
}
inline ::hal::Format ImageMsg::format() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.format)
  return _internal_format();
}
inline void ImageMsg::_internal_set_format(::hal::Format value) {
  assert(::hal::Format_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.format_ = value;
}
inline void ImageMsg::set_format(::hal::Format value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.format)
}

// optional double timestamp = 6;
inline bool ImageMsg::_internal_has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImageMsg::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void ImageMsg::clear_timestamp() {
  _impl_.timestamp_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ImageMsg::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline double ImageMsg::timestamp() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.timestamp)
  return _internal_timestamp();
}
inline void ImageMsg::_internal_set_timestamp(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timestamp_ = value;
}
inline void ImageMsg::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.timestamp)
}

// optional .hal.ImageInfoMsg info = 7;
inline bool ImageMsg::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ImageMsg::has_info() const {
  return _internal_has_info();
}
inline void ImageMsg::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::hal::ImageInfoMsg& ImageMsg::_internal_info() const {
  const ::hal::ImageInfoMsg* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::ImageInfoMsg&>(
      ::hal::_ImageInfoMsg_default_instance_);
}
inline const ::hal::ImageInfoMsg& ImageMsg::info() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.info)
  return _internal_info();
}
inline void ImageMsg::unsafe_arena_set_allocated_info(
    ::hal::ImageInfoMsg* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.ImageMsg.info)
}
inline ::hal::ImageInfoMsg* ImageMsg::release_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::ImageInfoMsg* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::ImageInfoMsg* ImageMsg::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:hal.ImageMsg.info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::ImageInfoMsg* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::hal::ImageInfoMsg* ImageMsg::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::ImageInfoMsg>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::hal::ImageInfoMsg* ImageMsg::mutable_info() {
  ::hal::ImageInfoMsg* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:hal.ImageMsg.info)
  return _msg;
}
inline void ImageMsg::set_allocated_info(::hal::ImageInfoMsg* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:hal.ImageMsg.info)
}

// optional uint64 serial_number = 8;
inline bool ImageMsg::_internal_has_serial_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImageMsg::has_serial_number() const {
  return _internal_has_serial_number();
}
inline void ImageMsg::clear_serial_number() {
  _impl_.serial_number_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint64_t ImageMsg::_internal_serial_number() const {
  return _impl_.serial_number_;
}
inline uint64_t ImageMsg::serial_number() const {
  // @@protoc_insertion_point(field_get:hal.ImageMsg.serial_number)
  return _internal_serial_number();
}
inline void ImageMsg::_internal_set_serial_number(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.serial_number_ = value;
}
inline void ImageMsg::set_serial_number(uint64_t value) {
  _internal_set_serial_number(value);
  // @@protoc_insertion_point(field_set:hal.ImageMsg.serial_number)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hal::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hal::Type>() {
  return ::hal::Type_descriptor();
}
template <> struct is_proto_enum< ::hal::Format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hal::Format>() {
  return ::hal::Format_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Image_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeCamMessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_NodeCamMessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_NodeCamMessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_NodeCamMessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_NodeCamMessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_NodeCamMessage_2eproto;
class CamMsg;
struct CamMsgDefaultTypeInternal;
extern CamMsgDefaultTypeInternal _CamMsg_default_instance_;
class ImageMsg;
struct ImageMsgDefaultTypeInternal;
extern ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
class RegisterNodeCamRepMsg;
struct RegisterNodeCamRepMsgDefaultTypeInternal;
extern RegisterNodeCamRepMsgDefaultTypeInternal _RegisterNodeCamRepMsg_default_instance_;
class RegisterNodeCamReqMsg;
struct RegisterNodeCamReqMsgDefaultTypeInternal;
extern RegisterNodeCamReqMsgDefaultTypeInternal _RegisterNodeCamReqMsg_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CamMsg* Arena::CreateMaybeMessage<::CamMsg>(Arena*);
template<> ::ImageMsg* Arena::CreateMaybeMessage<::ImageMsg>(Arena*);
template<> ::RegisterNodeCamRepMsg* Arena::CreateMaybeMessage<::RegisterNodeCamRepMsg>(Arena*);
template<> ::RegisterNodeCamReqMsg* Arena::CreateMaybeMessage<::RegisterNodeCamReqMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RegisterNodeCamReqMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeCamReqMsg) */ {
 public:
  inline RegisterNodeCamReqMsg() : RegisterNodeCamReqMsg(nullptr) {}
  ~RegisterNodeCamReqMsg() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeCamReqMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeCamReqMsg(const RegisterNodeCamReqMsg& from);
  RegisterNodeCamReqMsg(RegisterNodeCamReqMsg&& from) noexcept
    : RegisterNodeCamReqMsg() {
    *this = ::std::move(from);
  }

  inline RegisterNodeCamReqMsg& operator=(const RegisterNodeCamReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeCamReqMsg& operator=(RegisterNodeCamReqMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeCamReqMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeCamReqMsg* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeCamReqMsg*>(
               &_RegisterNodeCamReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RegisterNodeCamReqMsg& a, RegisterNodeCamReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeCamReqMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeCamReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeCamReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeCamReqMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeCamReqMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeCamReqMsg& from) {
    RegisterNodeCamReqMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeCamReqMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeCamReqMsg";
  }
  protected:
  explicit RegisterNodeCamReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // optional bytes uri = 1;
  bool has_uri() const;
  private:
  bool _internal_has_uri() const;
  public:
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:RegisterNodeCamReqMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NodeCamMessage_2eproto;
};
// -------------------------------------------------------------------

class RegisterNodeCamRepMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RegisterNodeCamRepMsg) */ {
 public:
  inline RegisterNodeCamRepMsg() : RegisterNodeCamRepMsg(nullptr) {}
  ~RegisterNodeCamRepMsg() override;
  explicit PROTOBUF_CONSTEXPR RegisterNodeCamRepMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegisterNodeCamRepMsg(const RegisterNodeCamRepMsg& from);
  RegisterNodeCamRepMsg(RegisterNodeCamRepMsg&& from) noexcept
    : RegisterNodeCamRepMsg() {
    *this = ::std::move(from);
  }

  inline RegisterNodeCamRepMsg& operator=(const RegisterNodeCamRepMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterNodeCamRepMsg& operator=(RegisterNodeCamRepMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegisterNodeCamRepMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegisterNodeCamRepMsg* internal_default_instance() {
    return reinterpret_cast<const RegisterNodeCamRepMsg*>(
               &_RegisterNodeCamRepMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegisterNodeCamRepMsg& a, RegisterNodeCamRepMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterNodeCamRepMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegisterNodeCamRepMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegisterNodeCamRepMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegisterNodeCamRepMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegisterNodeCamRepMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RegisterNodeCamRepMsg& from) {
    RegisterNodeCamRepMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterNodeCamRepMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RegisterNodeCamRepMsg";
  }
  protected:
  explicit RegisterNodeCamRepMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStepFieldNumber = 1,
    kRegsiterFlagFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kChannelsFieldNumber = 5,
  };
  // optional int32 time_step = 1;
  bool has_time_step() const;
  private:
  bool _internal_has_time_step() const;
  public:
  void clear_time_step();
  int32_t time_step() const;
  void set_time_step(int32_t value);
  private:
  int32_t _internal_time_step() const;
  void _internal_set_time_step(int32_t value);
  public:

  // optional int32 regsiter_flag = 2;
  bool has_regsiter_flag() const;
  private:
  bool _internal_has_regsiter_flag() const;
  public:
  void clear_regsiter_flag();
  int32_t regsiter_flag() const;
  void set_regsiter_flag(int32_t value);
  private:
  int32_t _internal_regsiter_flag() const;
  void _internal_set_regsiter_flag(int32_t value);
  public:

  // optional int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // optional int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // optional int32 channels = 5;
  bool has_channels() const;
  private:
  bool _internal_has_channels() const;
  public:
  void clear_channels();
  int32_t channels() const;
  void set_channels(int32_t value);
  private:
  int32_t _internal_channels() const;
  void _internal_set_channels(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:RegisterNodeCamRepMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t time_step_;
    int32_t regsiter_flag_;
    int32_t width_;
    int32_t height_;
    int32_t channels_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NodeCamMessage_2eproto;
};
// -------------------------------------------------------------------

class CamMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CamMsg) */ {
 public:
  inline CamMsg() : CamMsg(nullptr) {}
  ~CamMsg() override;
  explicit PROTOBUF_CONSTEXPR CamMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CamMsg(const CamMsg& from);
  CamMsg(CamMsg&& from) noexcept
    : CamMsg() {
    *this = ::std::move(from);
  }

  inline CamMsg& operator=(const CamMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CamMsg& operator=(CamMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CamMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CamMsg* internal_default_instance() {
    return reinterpret_cast<const CamMsg*>(
               &_CamMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CamMsg& a, CamMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CamMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CamMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CamMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CamMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CamMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CamMsg& from) {
    CamMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CamMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CamMsg";
  }
  protected:
  explicit CamMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kTimeStepFieldNumber = 2,
    kSizeFieldNumber = 3,
  };
  // repeated .ImageMsg image = 1;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::ImageMsg* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageMsg >*
      mutable_image();
  private:
  const ::ImageMsg& _internal_image(int index) const;
  ::ImageMsg* _internal_add_image();
  public:
  const ::ImageMsg& image(int index) const;
  ::ImageMsg* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageMsg >&
      image() const;

  // required int32 time_step = 2;
  bool has_time_step() const;
  private:
  bool _internal_has_time_step() const;
  public:
  void clear_time_step();
  int32_t time_step() const;
  void set_time_step(int32_t value);
  private:
  int32_t _internal_time_step() const;
  void _internal_set_time_step(int32_t value);
  public:

  // optional int32 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int32_t size() const;
  void set_size(int32_t value);
  private:
  int32_t _internal_size() const;
  void _internal_set_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:CamMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageMsg > image_;
    int32_t time_step_;
    int32_t size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NodeCamMessage_2eproto;
};
// -------------------------------------------------------------------

class ImageMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ImageMsg) */ {
 public:
  inline ImageMsg() : ImageMsg(nullptr) {}
  ~ImageMsg() override;
  explicit PROTOBUF_CONSTEXPR ImageMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageMsg(const ImageMsg& from);
  ImageMsg(ImageMsg&& from) noexcept
    : ImageMsg() {
    *this = ::std::move(from);
  }

  inline ImageMsg& operator=(const ImageMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageMsg& operator=(ImageMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageMsg* internal_default_instance() {
    return reinterpret_cast<const ImageMsg*>(
               &_ImageMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ImageMsg& a, ImageMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageMsg& from) {
    ImageMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ImageMsg";
  }
  protected:
  explicit ImageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 1,
    kImageTypeFieldNumber = 2,
    kImageHeightFieldNumber = 3,
    kImageWidthFieldNumber = 4,
  };
  // optional bytes image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // optional int32 image_type = 2;
  bool has_image_type() const;
  private:
  bool _internal_has_image_type() const;
  public:
  void clear_image_type();
  int32_t image_type() const;
  void set_image_type(int32_t value);
  private:
  int32_t _internal_image_type() const;
  void _internal_set_image_type(int32_t value);
  public:

  // optional int32 image_height = 3;
  bool has_image_height() const;
  private:
  bool _internal_has_image_height() const;
  public:
  void clear_image_height();
  int32_t image_height() const;
  void set_image_height(int32_t value);
  private:
  int32_t _internal_image_height() const;
  void _internal_set_image_height(int32_t value);
  public:

  // optional int32 image_width = 4;
  bool has_image_width() const;
  private:
  bool _internal_has_image_width() const;
  public:
  void clear_image_width();
  int32_t image_width() const;
  void set_image_width(int32_t value);
  private:
  int32_t _internal_image_width() const;
  void _internal_set_image_width(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ImageMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
    int32_t image_type_;
    int32_t image_height_;
    int32_t image_width_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_NodeCamMessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RegisterNodeCamReqMsg

// optional bytes uri = 1;
inline bool RegisterNodeCamReqMsg::_internal_has_uri() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterNodeCamReqMsg::has_uri() const {
  return _internal_has_uri();
}
inline void RegisterNodeCamReqMsg::clear_uri() {
  _impl_.uri_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterNodeCamReqMsg::uri() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamReqMsg.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegisterNodeCamReqMsg::set_uri(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uri_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:RegisterNodeCamReqMsg.uri)
}
inline std::string* RegisterNodeCamReqMsg::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:RegisterNodeCamReqMsg.uri)
  return _s;
}
inline const std::string& RegisterNodeCamReqMsg::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void RegisterNodeCamReqMsg::_internal_set_uri(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* RegisterNodeCamReqMsg::_internal_mutable_uri() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* RegisterNodeCamReqMsg::release_uri() {
  // @@protoc_insertion_point(field_release:RegisterNodeCamReqMsg.uri)
  if (!_internal_has_uri()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uri_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegisterNodeCamReqMsg::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RegisterNodeCamReqMsg.uri)
}

// -------------------------------------------------------------------

// RegisterNodeCamRepMsg

// optional int32 time_step = 1;
inline bool RegisterNodeCamRepMsg::_internal_has_time_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterNodeCamRepMsg::has_time_step() const {
  return _internal_has_time_step();
}
inline void RegisterNodeCamRepMsg::clear_time_step() {
  _impl_.time_step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t RegisterNodeCamRepMsg::_internal_time_step() const {
  return _impl_.time_step_;
}
inline int32_t RegisterNodeCamRepMsg::time_step() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamRepMsg.time_step)
  return _internal_time_step();
}
inline void RegisterNodeCamRepMsg::_internal_set_time_step(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_step_ = value;
}
inline void RegisterNodeCamRepMsg::set_time_step(int32_t value) {
  _internal_set_time_step(value);
  // @@protoc_insertion_point(field_set:RegisterNodeCamRepMsg.time_step)
}

// optional int32 regsiter_flag = 2;
inline bool RegisterNodeCamRepMsg::_internal_has_regsiter_flag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterNodeCamRepMsg::has_regsiter_flag() const {
  return _internal_has_regsiter_flag();
}
inline void RegisterNodeCamRepMsg::clear_regsiter_flag() {
  _impl_.regsiter_flag_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t RegisterNodeCamRepMsg::_internal_regsiter_flag() const {
  return _impl_.regsiter_flag_;
}
inline int32_t RegisterNodeCamRepMsg::regsiter_flag() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamRepMsg.regsiter_flag)
  return _internal_regsiter_flag();
}
inline void RegisterNodeCamRepMsg::_internal_set_regsiter_flag(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.regsiter_flag_ = value;
}
inline void RegisterNodeCamRepMsg::set_regsiter_flag(int32_t value) {
  _internal_set_regsiter_flag(value);
  // @@protoc_insertion_point(field_set:RegisterNodeCamRepMsg.regsiter_flag)
}

// optional int32 width = 3;
inline bool RegisterNodeCamRepMsg::_internal_has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegisterNodeCamRepMsg::has_width() const {
  return _internal_has_width();
}
inline void RegisterNodeCamRepMsg::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t RegisterNodeCamRepMsg::_internal_width() const {
  return _impl_.width_;
}
inline int32_t RegisterNodeCamRepMsg::width() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamRepMsg.width)
  return _internal_width();
}
inline void RegisterNodeCamRepMsg::_internal_set_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.width_ = value;
}
inline void RegisterNodeCamRepMsg::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:RegisterNodeCamRepMsg.width)
}

// optional int32 height = 4;
inline bool RegisterNodeCamRepMsg::_internal_has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegisterNodeCamRepMsg::has_height() const {
  return _internal_has_height();
}
inline void RegisterNodeCamRepMsg::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t RegisterNodeCamRepMsg::_internal_height() const {
  return _impl_.height_;
}
inline int32_t RegisterNodeCamRepMsg::height() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamRepMsg.height)
  return _internal_height();
}
inline void RegisterNodeCamRepMsg::_internal_set_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.height_ = value;
}
inline void RegisterNodeCamRepMsg::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:RegisterNodeCamRepMsg.height)
}

// optional int32 channels = 5;
inline bool RegisterNodeCamRepMsg::_internal_has_channels() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegisterNodeCamRepMsg::has_channels() const {
  return _internal_has_channels();
}
inline void RegisterNodeCamRepMsg::clear_channels() {
  _impl_.channels_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t RegisterNodeCamRepMsg::_internal_channels() const {
  return _impl_.channels_;
}
inline int32_t RegisterNodeCamRepMsg::channels() const {
  // @@protoc_insertion_point(field_get:RegisterNodeCamRepMsg.channels)
  return _internal_channels();
}
inline void RegisterNodeCamRepMsg::_internal_set_channels(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.channels_ = value;
}
inline void RegisterNodeCamRepMsg::set_channels(int32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:RegisterNodeCamRepMsg.channels)
}

// -------------------------------------------------------------------

// CamMsg

// repeated .ImageMsg image = 1;
inline int CamMsg::_internal_image_size() const {
  return _impl_.image_.size();
}
inline int CamMsg::image_size() const {
  return _internal_image_size();
}
inline void CamMsg::clear_image() {
  _impl_.image_.Clear();
}
inline ::ImageMsg* CamMsg::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:CamMsg.image)
  return _impl_.image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageMsg >*
CamMsg::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:CamMsg.image)
  return &_impl_.image_;
}
inline const ::ImageMsg& CamMsg::_internal_image(int index) const {
  return _impl_.image_.Get(index);
}
inline const ::ImageMsg& CamMsg::image(int index) const {
  // @@protoc_insertion_point(field_get:CamMsg.image)
  return _internal_image(index);
}
inline ::ImageMsg* CamMsg::_internal_add_image() {
  return _impl_.image_.Add();
}
inline ::ImageMsg* CamMsg::add_image() {
  ::ImageMsg* _add = _internal_add_image();
  // @@protoc_insertion_point(field_add:CamMsg.image)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ImageMsg >&
CamMsg::image() const {
  // @@protoc_insertion_point(field_list:CamMsg.image)
  return _impl_.image_;
}

// required int32 time_step = 2;
inline bool CamMsg::_internal_has_time_step() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CamMsg::has_time_step() const {
  return _internal_has_time_step();
}
inline void CamMsg::clear_time_step() {
  _impl_.time_step_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CamMsg::_internal_time_step() const {
  return _impl_.time_step_;
}
inline int32_t CamMsg::time_step() const {
  // @@protoc_insertion_point(field_get:CamMsg.time_step)
  return _internal_time_step();
}
inline void CamMsg::_internal_set_time_step(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.time_step_ = value;
}
inline void CamMsg::set_time_step(int32_t value) {
  _internal_set_time_step(value);
  // @@protoc_insertion_point(field_set:CamMsg.time_step)
}

// optional int32 size = 3;
inline bool CamMsg::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CamMsg::has_size() const {
  return _internal_has_size();
}
inline void CamMsg::clear_size() {
  _impl_.size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CamMsg::_internal_size() const {
  return _impl_.size_;
}
inline int32_t CamMsg::size() const {
  // @@protoc_insertion_point(field_get:CamMsg.size)
  return _internal_size();
}
inline void CamMsg::_internal_set_size(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.size_ = value;
}
inline void CamMsg::set_size(int32_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:CamMsg.size)
}

// -------------------------------------------------------------------

// ImageMsg

// optional bytes image = 1;
inline bool ImageMsg::_internal_has_image() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageMsg::has_image() const {
  return _internal_has_image();
}
inline void ImageMsg::clear_image() {
  _impl_.image_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ImageMsg::image() const {
  // @@protoc_insertion_point(field_get:ImageMsg.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageMsg::set_image(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ImageMsg.image)
}
inline std::string* ImageMsg::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:ImageMsg.image)
  return _s;
}
inline const std::string& ImageMsg::_internal_image() const {
  return _impl_.image_.Get();
}
inline void ImageMsg::_internal_set_image(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.image_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageMsg::_internal_mutable_image() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.image_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageMsg::release_image() {
  // @@protoc_insertion_point(field_release:ImageMsg.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.image_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ImageMsg::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.image_.IsDefault()) {
    _impl_.image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ImageMsg.image)
}

// optional int32 image_type = 2;
inline bool ImageMsg::_internal_has_image_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageMsg::has_image_type() const {
  return _internal_has_image_type();
}
inline void ImageMsg::clear_image_type() {
  _impl_.image_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ImageMsg::_internal_image_type() const {
  return _impl_.image_type_;
}
inline int32_t ImageMsg::image_type() const {
  // @@protoc_insertion_point(field_get:ImageMsg.image_type)
  return _internal_image_type();
}
inline void ImageMsg::_internal_set_image_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.image_type_ = value;
}
inline void ImageMsg::set_image_type(int32_t value) {
  _internal_set_image_type(value);
  // @@protoc_insertion_point(field_set:ImageMsg.image_type)
}

// optional int32 image_height = 3;
inline bool ImageMsg::_internal_has_image_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ImageMsg::has_image_height() const {
  return _internal_has_image_height();
}
inline void ImageMsg::clear_image_height() {
  _impl_.image_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ImageMsg::_internal_image_height() const {
  return _impl_.image_height_;
}
inline int32_t ImageMsg::image_height() const {
  // @@protoc_insertion_point(field_get:ImageMsg.image_height)
  return _internal_image_height();
}
inline void ImageMsg::_internal_set_image_height(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.image_height_ = value;
}
inline void ImageMsg::set_image_height(int32_t value) {
  _internal_set_image_height(value);
  // @@protoc_insertion_point(field_set:ImageMsg.image_height)
}

// optional int32 image_width = 4;
inline bool ImageMsg::_internal_has_image_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImageMsg::has_image_width() const {
  return _internal_has_image_width();
}
inline void ImageMsg::clear_image_width() {
  _impl_.image_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ImageMsg::_internal_image_width() const {
  return _impl_.image_width_;
}
inline int32_t ImageMsg::image_width() const {
  // @@protoc_insertion_point(field_get:ImageMsg.image_width)
  return _internal_image_width();
}
inline void ImageMsg::_internal_set_image_width(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.image_width_ = value;
}
inline void ImageMsg::set_image_width(int32_t value) {
  _internal_set_image_width(value);
  // @@protoc_insertion_point(field_set:ImageMsg.image_width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_NodeCamMessage_2eproto

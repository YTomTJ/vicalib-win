// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PoseSensor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_PoseSensor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_PoseSensor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Pose.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_PoseSensor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_PoseSensor_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PoseSensor_2eproto;
namespace hal {
class PoseSensorMsg;
struct PoseSensorMsgDefaultTypeInternal;
extern PoseSensorMsgDefaultTypeInternal _PoseSensorMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::PoseSensorMsg* Arena::CreateMaybeMessage<::hal::PoseSensorMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class PoseSensorMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.PoseSensorMsg) */ {
 public:
  inline PoseSensorMsg() : PoseSensorMsg(nullptr) {}
  ~PoseSensorMsg() override;
  explicit PROTOBUF_CONSTEXPR PoseSensorMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseSensorMsg(const PoseSensorMsg& from);
  PoseSensorMsg(PoseSensorMsg&& from) noexcept
    : PoseSensorMsg() {
    *this = ::std::move(from);
  }

  inline PoseSensorMsg& operator=(const PoseSensorMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseSensorMsg& operator=(PoseSensorMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseSensorMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseSensorMsg* internal_default_instance() {
    return reinterpret_cast<const PoseSensorMsg*>(
               &_PoseSensorMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PoseSensorMsg& a, PoseSensorMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseSensorMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseSensorMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseSensorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseSensorMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseSensorMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PoseSensorMsg& from) {
    PoseSensorMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseSensorMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.PoseSensorMsg";
  }
  protected:
  explicit PoseSensorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 3,
    kDeviceTimeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .hal.PoseMsg pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::hal::PoseMsg& pose() const;
  PROTOBUF_NODISCARD ::hal::PoseMsg* release_pose();
  ::hal::PoseMsg* mutable_pose();
  void set_allocated_pose(::hal::PoseMsg* pose);
  private:
  const ::hal::PoseMsg& _internal_pose() const;
  ::hal::PoseMsg* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::hal::PoseMsg* pose);
  ::hal::PoseMsg* unsafe_arena_release_pose();

  // optional double deviceTime = 2;
  bool has_devicetime() const;
  private:
  bool _internal_has_devicetime() const;
  public:
  void clear_devicetime();
  double devicetime() const;
  void set_devicetime(double value);
  private:
  double _internal_devicetime() const;
  void _internal_set_devicetime(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.PoseSensorMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hal::PoseMsg* pose_;
    double devicetime_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_PoseSensor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PoseSensorMsg

// optional int32 id = 1;
inline bool PoseSensorMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PoseSensorMsg::has_id() const {
  return _internal_has_id();
}
inline void PoseSensorMsg::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t PoseSensorMsg::_internal_id() const {
  return _impl_.id_;
}
inline int32_t PoseSensorMsg::id() const {
  // @@protoc_insertion_point(field_get:hal.PoseSensorMsg.id)
  return _internal_id();
}
inline void PoseSensorMsg::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void PoseSensorMsg::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hal.PoseSensorMsg.id)
}

// optional double deviceTime = 2;
inline bool PoseSensorMsg::_internal_has_devicetime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PoseSensorMsg::has_devicetime() const {
  return _internal_has_devicetime();
}
inline void PoseSensorMsg::clear_devicetime() {
  _impl_.devicetime_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double PoseSensorMsg::_internal_devicetime() const {
  return _impl_.devicetime_;
}
inline double PoseSensorMsg::devicetime() const {
  // @@protoc_insertion_point(field_get:hal.PoseSensorMsg.deviceTime)
  return _internal_devicetime();
}
inline void PoseSensorMsg::_internal_set_devicetime(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicetime_ = value;
}
inline void PoseSensorMsg::set_devicetime(double value) {
  _internal_set_devicetime(value);
  // @@protoc_insertion_point(field_set:hal.PoseSensorMsg.deviceTime)
}

// optional .hal.PoseMsg pose = 3;
inline bool PoseSensorMsg::_internal_has_pose() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pose_ != nullptr);
  return value;
}
inline bool PoseSensorMsg::has_pose() const {
  return _internal_has_pose();
}
inline const ::hal::PoseMsg& PoseSensorMsg::_internal_pose() const {
  const ::hal::PoseMsg* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::PoseMsg&>(
      ::hal::_PoseMsg_default_instance_);
}
inline const ::hal::PoseMsg& PoseSensorMsg::pose() const {
  // @@protoc_insertion_point(field_get:hal.PoseSensorMsg.pose)
  return _internal_pose();
}
inline void PoseSensorMsg::unsafe_arena_set_allocated_pose(
    ::hal::PoseMsg* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.PoseSensorMsg.pose)
}
inline ::hal::PoseMsg* PoseSensorMsg::release_pose() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::PoseMsg* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::PoseMsg* PoseSensorMsg::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:hal.PoseSensorMsg.pose)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::PoseMsg* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::hal::PoseMsg* PoseSensorMsg::_internal_mutable_pose() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::PoseMsg>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::hal::PoseMsg* PoseSensorMsg::mutable_pose() {
  ::hal::PoseMsg* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:hal.PoseSensorMsg.pose)
  return _msg;
}
inline void PoseSensorMsg::set_allocated_pose(::hal::PoseMsg* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:hal.PoseSensorMsg.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_PoseSensor_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Car.proto

#include "Car.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR CarStateMsg::CarStateMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steer_angle_)*/0
  , /*decltype(_impl_.rear_steer_angle_)*/0
  , /*decltype(_impl_.motor_current_)*/0
  , /*decltype(_impl_.batt_volt_)*/0
  , /*decltype(_impl_.wheel_speed_fl_)*/0
  , /*decltype(_impl_.wheel_speed_fr_)*/0
  , /*decltype(_impl_.wheel_speed_rl_)*/0
  , /*decltype(_impl_.wheel_speed_rr_)*/0
  , /*decltype(_impl_.swing_angle_fl_)*/0
  , /*decltype(_impl_.swing_angle_fr_)*/0
  , /*decltype(_impl_.swing_angle_rl_)*/0
  , /*decltype(_impl_.swing_angle_rr_)*/0
  , /*decltype(_impl_.device_time_)*/0} {}
struct CarStateMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarStateMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarStateMsgDefaultTypeInternal() {}
  union {
    CarStateMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarStateMsgDefaultTypeInternal _CarStateMsg_default_instance_;
PROTOBUF_CONSTEXPR CarCommandMsg::CarCommandMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.steering_angle_)*/0
  , /*decltype(_impl_.rear_steering_angle_)*/0
  , /*decltype(_impl_.throttle_percent_)*/0
  , /*decltype(_impl_.device_time_)*/0} {}
struct CarCommandMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarCommandMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarCommandMsgDefaultTypeInternal() {}
  union {
    CarCommandMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarCommandMsgDefaultTypeInternal _CarCommandMsg_default_instance_;
PROTOBUF_CONSTEXPR CarSettingMsg::CarSettingMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.max_acc_limit_)*/0} {}
struct CarSettingMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarSettingMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarSettingMsgDefaultTypeInternal() {}
  union {
    CarSettingMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarSettingMsgDefaultTypeInternal _CarSettingMsg_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_Car_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Car_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Car_2eproto = nullptr;

const uint32_t TableStruct_Car_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.steer_angle_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.rear_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.motor_current_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.batt_volt_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.wheel_speed_fl_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.wheel_speed_fr_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.wheel_speed_rl_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.wheel_speed_rr_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.swing_angle_fl_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.swing_angle_fr_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.swing_angle_rl_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.swing_angle_rr_),
  PROTOBUF_FIELD_OFFSET(::hal::CarStateMsg, _impl_.device_time_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _impl_.steering_angle_),
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _impl_.rear_steering_angle_),
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _impl_.throttle_percent_),
  PROTOBUF_FIELD_OFFSET(::hal::CarCommandMsg, _impl_.device_time_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::hal::CarSettingMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::CarSettingMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::CarSettingMsg, _impl_.max_acc_limit_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 19, -1, sizeof(::hal::CarStateMsg)},
  { 32, 42, -1, sizeof(::hal::CarCommandMsg)},
  { 46, 53, -1, sizeof(::hal::CarSettingMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_CarStateMsg_default_instance_._instance,
  &::hal::_CarCommandMsg_default_instance_._instance,
  &::hal::_CarSettingMsg_default_instance_._instance,
};

const char descriptor_table_protodef_Car_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tCar.proto\022\003hal\032\014Matrix.proto\"\273\002\n\013CarSt"
  "ateMsg\022\023\n\013steer_angle\030\001 \001(\001\022\030\n\020rear_stee"
  "r_angle\030\002 \001(\001\022\025\n\rmotor_current\030\003 \001(\005\022\021\n\t"
  "batt_volt\030\004 \001(\005\022\026\n\016wheel_speed_fl\030\005 \001(\001\022"
  "\026\n\016wheel_speed_fr\030\006 \001(\001\022\026\n\016wheel_speed_r"
  "l\030\007 \001(\001\022\026\n\016wheel_speed_rr\030\010 \001(\001\022\026\n\016swing"
  "_angle_fl\030\t \001(\001\022\026\n\016swing_angle_fr\030\n \001(\001\022"
  "\026\n\016swing_angle_rl\030\013 \001(\001\022\026\n\016swing_angle_r"
  "r\030\014 \001(\001\022\023\n\013device_time\030\r \001(\005\"s\n\rCarComma"
  "ndMsg\022\026\n\016steering_angle\030\001 \001(\001\022\033\n\023rear_st"
  "eering_angle\030\002 \001(\001\022\030\n\020throttle_percent\030\003"
  " \001(\001\022\023\n\013device_time\030\004 \001(\005\"&\n\rCarSettingM"
  "sg\022\025\n\rmax_acc_limit\030\001 \001(\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Car_2eproto_deps[1] = {
  &::descriptor_table_Matrix_2eproto,
};
static ::_pbi::once_flag descriptor_table_Car_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Car_2eproto = {
    false, false, 505, descriptor_table_protodef_Car_2eproto,
    "Car.proto",
    &descriptor_table_Car_2eproto_once, descriptor_table_Car_2eproto_deps, 1, 3,
    schemas, file_default_instances, TableStruct_Car_2eproto::offsets,
    file_level_metadata_Car_2eproto, file_level_enum_descriptors_Car_2eproto,
    file_level_service_descriptors_Car_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Car_2eproto_getter() {
  return &descriptor_table_Car_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Car_2eproto(&descriptor_table_Car_2eproto);
namespace hal {

// ===================================================================

class CarStateMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CarStateMsg>()._impl_._has_bits_);
  static void set_has_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rear_steer_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_motor_current(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_batt_volt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_wheel_speed_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_wheel_speed_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_wheel_speed_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_wheel_speed_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_swing_angle_fl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_swing_angle_fr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_swing_angle_rl(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_swing_angle_rr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_device_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

CarStateMsg::CarStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.CarStateMsg)
}
CarStateMsg::CarStateMsg(const CarStateMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarStateMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_){}
    , decltype(_impl_.rear_steer_angle_){}
    , decltype(_impl_.motor_current_){}
    , decltype(_impl_.batt_volt_){}
    , decltype(_impl_.wheel_speed_fl_){}
    , decltype(_impl_.wheel_speed_fr_){}
    , decltype(_impl_.wheel_speed_rl_){}
    , decltype(_impl_.wheel_speed_rr_){}
    , decltype(_impl_.swing_angle_fl_){}
    , decltype(_impl_.swing_angle_fr_){}
    , decltype(_impl_.swing_angle_rl_){}
    , decltype(_impl_.swing_angle_rr_){}
    , decltype(_impl_.device_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steer_angle_, &from._impl_.steer_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_time_) -
    reinterpret_cast<char*>(&_impl_.steer_angle_)) + sizeof(_impl_.device_time_));
  // @@protoc_insertion_point(copy_constructor:hal.CarStateMsg)
}

inline void CarStateMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steer_angle_){0}
    , decltype(_impl_.rear_steer_angle_){0}
    , decltype(_impl_.motor_current_){0}
    , decltype(_impl_.batt_volt_){0}
    , decltype(_impl_.wheel_speed_fl_){0}
    , decltype(_impl_.wheel_speed_fr_){0}
    , decltype(_impl_.wheel_speed_rl_){0}
    , decltype(_impl_.wheel_speed_rr_){0}
    , decltype(_impl_.swing_angle_fl_){0}
    , decltype(_impl_.swing_angle_fr_){0}
    , decltype(_impl_.swing_angle_rl_){0}
    , decltype(_impl_.swing_angle_rr_){0}
    , decltype(_impl_.device_time_){0}
  };
}

CarStateMsg::~CarStateMsg() {
  // @@protoc_insertion_point(destructor:hal.CarStateMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarStateMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarStateMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarStateMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.CarStateMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.steer_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.wheel_speed_rr_) -
        reinterpret_cast<char*>(&_impl_.steer_angle_)) + sizeof(_impl_.wheel_speed_rr_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.swing_angle_fl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.device_time_) -
        reinterpret_cast<char*>(&_impl_.swing_angle_fl_)) + sizeof(_impl_.device_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarStateMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double steer_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steer_angle(&has_bits);
          _impl_.steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rear_steer_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_rear_steer_angle(&has_bits);
          _impl_.rear_steer_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_current = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_motor_current(&has_bits);
          _impl_.motor_current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 batt_volt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_batt_volt(&has_bits);
          _impl_.batt_volt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_speed_fl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_wheel_speed_fl(&has_bits);
          _impl_.wheel_speed_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_speed_fr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_wheel_speed_fr(&has_bits);
          _impl_.wheel_speed_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_speed_rl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_wheel_speed_rl(&has_bits);
          _impl_.wheel_speed_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double wheel_speed_rr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_wheel_speed_rr(&has_bits);
          _impl_.wheel_speed_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double swing_angle_fl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_swing_angle_fl(&has_bits);
          _impl_.swing_angle_fl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double swing_angle_fr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          _Internal::set_has_swing_angle_fr(&has_bits);
          _impl_.swing_angle_fr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double swing_angle_rl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _Internal::set_has_swing_angle_rl(&has_bits);
          _impl_.swing_angle_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double swing_angle_rr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _Internal::set_has_swing_angle_rr(&has_bits);
          _impl_.swing_angle_rr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_device_time(&has_bits);
          _impl_.device_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarStateMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.CarStateMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double steer_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_steer_angle(), target);
  }

  // optional double rear_steer_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_rear_steer_angle(), target);
  }

  // optional int32 motor_current = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_motor_current(), target);
  }

  // optional int32 batt_volt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_batt_volt(), target);
  }

  // optional double wheel_speed_fl = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_wheel_speed_fl(), target);
  }

  // optional double wheel_speed_fr = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_wheel_speed_fr(), target);
  }

  // optional double wheel_speed_rl = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_wheel_speed_rl(), target);
  }

  // optional double wheel_speed_rr = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_wheel_speed_rr(), target);
  }

  // optional double swing_angle_fl = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_swing_angle_fl(), target);
  }

  // optional double swing_angle_fr = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(10, this->_internal_swing_angle_fr(), target);
  }

  // optional double swing_angle_rl = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_swing_angle_rl(), target);
  }

  // optional double swing_angle_rr = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_swing_angle_rr(), target);
  }

  // optional int32 device_time = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_device_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.CarStateMsg)
  return target;
}

size_t CarStateMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.CarStateMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional double steer_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rear_steer_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 motor_current = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_current());
    }

    // optional int32 batt_volt = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batt_volt());
    }

    // optional double wheel_speed_fl = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double wheel_speed_fr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double wheel_speed_rl = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double wheel_speed_rr = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional double swing_angle_fl = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double swing_angle_fr = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double swing_angle_rl = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double swing_angle_rr = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 device_time = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarStateMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarStateMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarStateMsg::GetClassData() const { return &_class_data_; }


void CarStateMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarStateMsg*>(&to_msg);
  auto& from = static_cast<const CarStateMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.CarStateMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steer_angle_ = from._impl_.steer_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rear_steer_angle_ = from._impl_.rear_steer_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.motor_current_ = from._impl_.motor_current_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.batt_volt_ = from._impl_.batt_volt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.wheel_speed_fl_ = from._impl_.wheel_speed_fl_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.wheel_speed_fr_ = from._impl_.wheel_speed_fr_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.wheel_speed_rl_ = from._impl_.wheel_speed_rl_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.wheel_speed_rr_ = from._impl_.wheel_speed_rr_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.swing_angle_fl_ = from._impl_.swing_angle_fl_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.swing_angle_fr_ = from._impl_.swing_angle_fr_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.swing_angle_rl_ = from._impl_.swing_angle_rl_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.swing_angle_rr_ = from._impl_.swing_angle_rr_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.device_time_ = from._impl_.device_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarStateMsg::CopyFrom(const CarStateMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.CarStateMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarStateMsg::IsInitialized() const {
  return true;
}

void CarStateMsg::InternalSwap(CarStateMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarStateMsg, _impl_.device_time_)
      + sizeof(CarStateMsg::_impl_.device_time_)
      - PROTOBUF_FIELD_OFFSET(CarStateMsg, _impl_.steer_angle_)>(
          reinterpret_cast<char*>(&_impl_.steer_angle_),
          reinterpret_cast<char*>(&other->_impl_.steer_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarStateMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Car_2eproto_getter, &descriptor_table_Car_2eproto_once,
      file_level_metadata_Car_2eproto[0]);
}

// ===================================================================

class CarCommandMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CarCommandMsg>()._impl_._has_bits_);
  static void set_has_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rear_steering_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_throttle_percent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CarCommandMsg::CarCommandMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.CarCommandMsg)
}
CarCommandMsg::CarCommandMsg(const CarCommandMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarCommandMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steering_angle_){}
    , decltype(_impl_.rear_steering_angle_){}
    , decltype(_impl_.throttle_percent_){}
    , decltype(_impl_.device_time_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.steering_angle_, &from._impl_.steering_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_time_) -
    reinterpret_cast<char*>(&_impl_.steering_angle_)) + sizeof(_impl_.device_time_));
  // @@protoc_insertion_point(copy_constructor:hal.CarCommandMsg)
}

inline void CarCommandMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.steering_angle_){0}
    , decltype(_impl_.rear_steering_angle_){0}
    , decltype(_impl_.throttle_percent_){0}
    , decltype(_impl_.device_time_){0}
  };
}

CarCommandMsg::~CarCommandMsg() {
  // @@protoc_insertion_point(destructor:hal.CarCommandMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarCommandMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarCommandMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarCommandMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.CarCommandMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.steering_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.device_time_) -
        reinterpret_cast<char*>(&_impl_.steering_angle_)) + sizeof(_impl_.device_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarCommandMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double steering_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_steering_angle(&has_bits);
          _impl_.steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double rear_steering_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_rear_steering_angle(&has_bits);
          _impl_.rear_steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double throttle_percent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_throttle_percent(&has_bits);
          _impl_.throttle_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 device_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_device_time(&has_bits);
          _impl_.device_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarCommandMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.CarCommandMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double steering_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_steering_angle(), target);
  }

  // optional double rear_steering_angle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_rear_steering_angle(), target);
  }

  // optional double throttle_percent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_throttle_percent(), target);
  }

  // optional int32 device_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_device_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.CarCommandMsg)
  return target;
}

size_t CarCommandMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.CarCommandMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double steering_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double rear_steering_angle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double throttle_percent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 device_time = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_time());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarCommandMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarCommandMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarCommandMsg::GetClassData() const { return &_class_data_; }


void CarCommandMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarCommandMsg*>(&to_msg);
  auto& from = static_cast<const CarCommandMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.CarCommandMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.steering_angle_ = from._impl_.steering_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rear_steering_angle_ = from._impl_.rear_steering_angle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.throttle_percent_ = from._impl_.throttle_percent_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.device_time_ = from._impl_.device_time_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarCommandMsg::CopyFrom(const CarCommandMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.CarCommandMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarCommandMsg::IsInitialized() const {
  return true;
}

void CarCommandMsg::InternalSwap(CarCommandMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CarCommandMsg, _impl_.device_time_)
      + sizeof(CarCommandMsg::_impl_.device_time_)
      - PROTOBUF_FIELD_OFFSET(CarCommandMsg, _impl_.steering_angle_)>(
          reinterpret_cast<char*>(&_impl_.steering_angle_),
          reinterpret_cast<char*>(&other->_impl_.steering_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CarCommandMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Car_2eproto_getter, &descriptor_table_Car_2eproto_once,
      file_level_metadata_Car_2eproto[1]);
}

// ===================================================================

class CarSettingMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CarSettingMsg>()._impl_._has_bits_);
  static void set_has_max_acc_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CarSettingMsg::CarSettingMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.CarSettingMsg)
}
CarSettingMsg::CarSettingMsg(const CarSettingMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarSettingMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_acc_limit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.max_acc_limit_ = from._impl_.max_acc_limit_;
  // @@protoc_insertion_point(copy_constructor:hal.CarSettingMsg)
}

inline void CarSettingMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.max_acc_limit_){0}
  };
}

CarSettingMsg::~CarSettingMsg() {
  // @@protoc_insertion_point(destructor:hal.CarSettingMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarSettingMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CarSettingMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarSettingMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.CarSettingMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_acc_limit_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarSettingMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_acc_limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_acc_limit(&has_bits);
          _impl_.max_acc_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarSettingMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.CarSettingMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 max_acc_limit = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_acc_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.CarSettingMsg)
  return target;
}

size_t CarSettingMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.CarSettingMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 max_acc_limit = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_acc_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarSettingMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarSettingMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarSettingMsg::GetClassData() const { return &_class_data_; }


void CarSettingMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarSettingMsg*>(&to_msg);
  auto& from = static_cast<const CarSettingMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.CarSettingMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_acc_limit()) {
    _this->_internal_set_max_acc_limit(from._internal_max_acc_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarSettingMsg::CopyFrom(const CarSettingMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.CarSettingMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarSettingMsg::IsInitialized() const {
  return true;
}

void CarSettingMsg::InternalSwap(CarSettingMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.max_acc_limit_, other->_impl_.max_acc_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarSettingMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Car_2eproto_getter, &descriptor_table_Car_2eproto_once,
      file_level_metadata_Car_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::CarStateMsg*
Arena::CreateMaybeMessage< ::hal::CarStateMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::CarStateMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hal::CarCommandMsg*
Arena::CreateMaybeMessage< ::hal::CarCommandMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::CarCommandMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hal::CarSettingMsg*
Arena::CreateMaybeMessage< ::hal::CarSettingMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::CarSettingMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

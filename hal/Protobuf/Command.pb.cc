// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#include "Command.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR CommanderMsg::CommanderMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.torques_)*/nullptr
  , /*decltype(_impl_.force_)*/0
  , /*decltype(_impl_.curvature_)*/0
  , /*decltype(_impl_.forcedt_)*/0
  , /*decltype(_impl_.worldid_)*/0
  , /*decltype(_impl_.nodelay_)*/false
  , /*decltype(_impl_.noupdate_)*/false
  , /*decltype(_impl_.phi_)*/0} {}
struct CommanderMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommanderMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommanderMsgDefaultTypeInternal() {}
  union {
    CommanderMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommanderMsgDefaultTypeInternal _CommanderMsg_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_Command_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Command_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Command_2eproto = nullptr;

const uint32_t TableStruct_Command_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.worldid_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.force_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.curvature_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.torques_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.forcedt_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.phi_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.nodelay_),
  PROTOBUF_FIELD_OFFSET(::hal::CommanderMsg, _impl_.noupdate_),
  4,
  1,
  2,
  0,
  3,
  7,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::hal::CommanderMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_CommanderMsg_default_instance_._instance,
};

const char descriptor_table_protodef_Command_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rCommand.proto\022\003hal\032\014Matrix.proto\"\243\001\n\014C"
  "ommanderMsg\022\017\n\007worldId\030\001 \002(\005\022\r\n\005force\030\002 "
  "\002(\001\022\021\n\tcurvature\030\003 \002(\001\022\037\n\007torques\030\004 \002(\0132"
  "\016.hal.VectorMsg\022\017\n\007forceDt\030\005 \002(\001\022\013\n\003phi\030"
  "\006 \002(\001\022\017\n\007noDelay\030\007 \002(\010\022\020\n\010noUpdate\030\010 \002(\010"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Command_2eproto_deps[1] = {
  &::descriptor_table_Matrix_2eproto,
};
static ::_pbi::once_flag descriptor_table_Command_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Command_2eproto = {
    false, false, 200, descriptor_table_protodef_Command_2eproto,
    "Command.proto",
    &descriptor_table_Command_2eproto_once, descriptor_table_Command_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_Command_2eproto::offsets,
    file_level_metadata_Command_2eproto, file_level_enum_descriptors_Command_2eproto,
    file_level_service_descriptors_Command_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Command_2eproto_getter() {
  return &descriptor_table_Command_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Command_2eproto(&descriptor_table_Command_2eproto);
namespace hal {

// ===================================================================

class CommanderMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CommanderMsg>()._impl_._has_bits_);
  static void set_has_worldid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curvature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hal::VectorMsg& torques(const CommanderMsg* msg);
  static void set_has_torques(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_forcedt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_nodelay(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_noupdate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::hal::VectorMsg&
CommanderMsg::_Internal::torques(const CommanderMsg* msg) {
  return *msg->_impl_.torques_;
}
void CommanderMsg::clear_torques() {
  if (_impl_.torques_ != nullptr) _impl_.torques_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommanderMsg::CommanderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.CommanderMsg)
}
CommanderMsg::CommanderMsg(const CommanderMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommanderMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torques_){nullptr}
    , decltype(_impl_.force_){}
    , decltype(_impl_.curvature_){}
    , decltype(_impl_.forcedt_){}
    , decltype(_impl_.worldid_){}
    , decltype(_impl_.nodelay_){}
    , decltype(_impl_.noupdate_){}
    , decltype(_impl_.phi_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_torques()) {
    _this->_impl_.torques_ = new ::hal::VectorMsg(*from._impl_.torques_);
  }
  ::memcpy(&_impl_.force_, &from._impl_.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.phi_) -
    reinterpret_cast<char*>(&_impl_.force_)) + sizeof(_impl_.phi_));
  // @@protoc_insertion_point(copy_constructor:hal.CommanderMsg)
}

inline void CommanderMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.torques_){nullptr}
    , decltype(_impl_.force_){0}
    , decltype(_impl_.curvature_){0}
    , decltype(_impl_.forcedt_){0}
    , decltype(_impl_.worldid_){0}
    , decltype(_impl_.nodelay_){false}
    , decltype(_impl_.noupdate_){false}
    , decltype(_impl_.phi_){0}
  };
}

CommanderMsg::~CommanderMsg() {
  // @@protoc_insertion_point(destructor:hal.CommanderMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommanderMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.torques_;
}

void CommanderMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommanderMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.CommanderMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.torques_ != nullptr);
    _impl_.torques_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.force_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.phi_) -
        reinterpret_cast<char*>(&_impl_.force_)) + sizeof(_impl_.phi_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommanderMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 worldId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_worldid(&has_bits);
          _impl_.worldid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_force(&has_bits);
          _impl_.force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double curvature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_curvature(&has_bits);
          _impl_.curvature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .hal.VectorMsg torques = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_torques(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double forceDt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_forcedt(&has_bits);
          _impl_.forcedt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double phi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_phi(&has_bits);
          _impl_.phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required bool noDelay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_nodelay(&has_bits);
          _impl_.nodelay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool noUpdate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_noupdate(&has_bits);
          _impl_.noupdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommanderMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.CommanderMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 worldId = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_worldid(), target);
  }

  // required double force = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_force(), target);
  }

  // required double curvature = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_curvature(), target);
  }

  // required .hal.VectorMsg torques = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::torques(this),
        _Internal::torques(this).GetCachedSize(), target, stream);
  }

  // required double forceDt = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_forcedt(), target);
  }

  // required double phi = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_phi(), target);
  }

  // required bool noDelay = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_nodelay(), target);
  }

  // required bool noUpdate = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_noupdate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.CommanderMsg)
  return target;
}

size_t CommanderMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:hal.CommanderMsg)
  size_t total_size = 0;

  if (_internal_has_torques()) {
    // required .hal.VectorMsg torques = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.torques_);
  }

  if (_internal_has_force()) {
    // required double force = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_curvature()) {
    // required double curvature = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_forcedt()) {
    // required double forceDt = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_worldid()) {
    // required int32 worldId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_worldid());
  }

  if (_internal_has_nodelay()) {
    // required bool noDelay = 7;
    total_size += 1 + 1;
  }

  if (_internal_has_noupdate()) {
    // required bool noUpdate = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_phi()) {
    // required double phi = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommanderMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.CommanderMsg)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .hal.VectorMsg torques = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.torques_);

    // required double force = 2;
    total_size += 1 + 8;

    // required double curvature = 3;
    total_size += 1 + 8;

    // required double forceDt = 5;
    total_size += 1 + 8;

    // required int32 worldId = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_worldid());

    // required bool noDelay = 7;
    total_size += 1 + 1;

    // required bool noUpdate = 8;
    total_size += 1 + 1;

    // required double phi = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommanderMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommanderMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommanderMsg::GetClassData() const { return &_class_data_; }


void CommanderMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommanderMsg*>(&to_msg);
  auto& from = static_cast<const CommanderMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.CommanderMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_torques()->::hal::VectorMsg::MergeFrom(
          from._internal_torques());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.force_ = from._impl_.force_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.curvature_ = from._impl_.curvature_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.forcedt_ = from._impl_.forcedt_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.worldid_ = from._impl_.worldid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.nodelay_ = from._impl_.nodelay_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.noupdate_ = from._impl_.noupdate_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.phi_ = from._impl_.phi_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommanderMsg::CopyFrom(const CommanderMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.CommanderMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommanderMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CommanderMsg::InternalSwap(CommanderMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommanderMsg, _impl_.phi_)
      + sizeof(CommanderMsg::_impl_.phi_)
      - PROTOBUF_FIELD_OFFSET(CommanderMsg, _impl_.torques_)>(
          reinterpret_cast<char*>(&_impl_.torques_),
          reinterpret_cast<char*>(&other->_impl_.torques_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommanderMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Command_2eproto_getter, &descriptor_table_Command_2eproto_once,
      file_level_metadata_Command_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::CommanderMsg*
Arena::CreateMaybeMessage< ::hal::CommanderMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::CommanderMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

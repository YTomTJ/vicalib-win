// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NodeCamMessage.proto

#include "NodeCamMessage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR RegisterNodeCamReqMsg::RegisterNodeCamReqMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct RegisterNodeCamReqMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeCamReqMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeCamReqMsgDefaultTypeInternal() {}
  union {
    RegisterNodeCamReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeCamReqMsgDefaultTypeInternal _RegisterNodeCamReqMsg_default_instance_;
PROTOBUF_CONSTEXPR RegisterNodeCamRepMsg::RegisterNodeCamRepMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.time_step_)*/0
  , /*decltype(_impl_.regsiter_flag_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.channels_)*/0} {}
struct RegisterNodeCamRepMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterNodeCamRepMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterNodeCamRepMsgDefaultTypeInternal() {}
  union {
    RegisterNodeCamRepMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterNodeCamRepMsgDefaultTypeInternal _RegisterNodeCamRepMsg_default_instance_;
PROTOBUF_CONSTEXPR CamMsg::CamMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/{}
  , /*decltype(_impl_.time_step_)*/0
  , /*decltype(_impl_.size_)*/0} {}
struct CamMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CamMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CamMsgDefaultTypeInternal() {}
  union {
    CamMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CamMsgDefaultTypeInternal _CamMsg_default_instance_;
PROTOBUF_CONSTEXPR ImageMsg::ImageMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.image_type_)*/0
  , /*decltype(_impl_.image_height_)*/0
  , /*decltype(_impl_.image_width_)*/0} {}
struct ImageMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageMsgDefaultTypeInternal() {}
  union {
    ImageMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageMsgDefaultTypeInternal _ImageMsg_default_instance_;
static ::_pb::Metadata file_level_metadata_NodeCamMessage_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_NodeCamMessage_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_NodeCamMessage_2eproto = nullptr;

const uint32_t TableStruct_NodeCamMessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamReqMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamReqMsg, _impl_.uri_),
  0,
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_.time_step_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_.regsiter_flag_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::RegisterNodeCamRepMsg, _impl_.channels_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::CamMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::CamMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::CamMsg, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::CamMsg, _impl_.time_step_),
  PROTOBUF_FIELD_OFFSET(::CamMsg, _impl_.size_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _impl_.image_type_),
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _impl_.image_height_),
  PROTOBUF_FIELD_OFFSET(::ImageMsg, _impl_.image_width_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::RegisterNodeCamReqMsg)},
  { 8, 19, -1, sizeof(::RegisterNodeCamRepMsg)},
  { 24, 33, -1, sizeof(::CamMsg)},
  { 36, 46, -1, sizeof(::ImageMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_RegisterNodeCamReqMsg_default_instance_._instance,
  &::_RegisterNodeCamRepMsg_default_instance_._instance,
  &::_CamMsg_default_instance_._instance,
  &::_ImageMsg_default_instance_._instance,
};

const char descriptor_table_protodef_NodeCamMessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024NodeCamMessage.proto\"$\n\025RegisterNodeCa"
  "mReqMsg\022\013\n\003uri\030\001 \001(\014\"r\n\025RegisterNodeCamR"
  "epMsg\022\021\n\ttime_step\030\001 \001(\005\022\025\n\rregsiter_fla"
  "g\030\002 \001(\005\022\r\n\005width\030\003 \001(\005\022\016\n\006height\030\004 \001(\005\022\020"
  "\n\010channels\030\005 \001(\005\"C\n\006CamMsg\022\030\n\005image\030\001 \003("
  "\0132\t.ImageMsg\022\021\n\ttime_step\030\002 \002(\005\022\014\n\004size\030"
  "\003 \001(\005\"X\n\010ImageMsg\022\r\n\005image\030\001 \001(\014\022\022\n\nimag"
  "e_type\030\002 \001(\005\022\024\n\014image_height\030\003 \001(\005\022\023\n\013im"
  "age_width\030\004 \001(\005"
  ;
static ::_pbi::once_flag descriptor_table_NodeCamMessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_NodeCamMessage_2eproto = {
    false, false, 335, descriptor_table_protodef_NodeCamMessage_2eproto,
    "NodeCamMessage.proto",
    &descriptor_table_NodeCamMessage_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_NodeCamMessage_2eproto::offsets,
    file_level_metadata_NodeCamMessage_2eproto, file_level_enum_descriptors_NodeCamMessage_2eproto,
    file_level_service_descriptors_NodeCamMessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_NodeCamMessage_2eproto_getter() {
  return &descriptor_table_NodeCamMessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_NodeCamMessage_2eproto(&descriptor_table_NodeCamMessage_2eproto);

// ===================================================================

class RegisterNodeCamReqMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterNodeCamReqMsg>()._impl_._has_bits_);
  static void set_has_uri(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegisterNodeCamReqMsg::RegisterNodeCamReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeCamReqMsg)
}
RegisterNodeCamReqMsg::RegisterNodeCamReqMsg(const RegisterNodeCamReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeCamReqMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_uri()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:RegisterNodeCamReqMsg)
}

inline void RegisterNodeCamReqMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uri_){}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisterNodeCamReqMsg::~RegisterNodeCamReqMsg() {
  // @@protoc_insertion_point(destructor:RegisterNodeCamReqMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeCamReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uri_.Destroy();
}

void RegisterNodeCamReqMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeCamReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeCamReqMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.uri_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeCamReqMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeCamReqMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeCamReqMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes uri = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeCamReqMsg)
  return target;
}

size_t RegisterNodeCamReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeCamReqMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes uri = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_uri());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeCamReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeCamReqMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeCamReqMsg::GetClassData() const { return &_class_data_; }


void RegisterNodeCamReqMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeCamReqMsg*>(&to_msg);
  auto& from = static_cast<const RegisterNodeCamReqMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeCamReqMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_uri()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeCamReqMsg::CopyFrom(const RegisterNodeCamReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeCamReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeCamReqMsg::IsInitialized() const {
  return true;
}

void RegisterNodeCamReqMsg::InternalSwap(RegisterNodeCamReqMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeCamReqMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_NodeCamMessage_2eproto_getter, &descriptor_table_NodeCamMessage_2eproto_once,
      file_level_metadata_NodeCamMessage_2eproto[0]);
}

// ===================================================================

class RegisterNodeCamRepMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterNodeCamRepMsg>()._impl_._has_bits_);
  static void set_has_time_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_regsiter_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_channels(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

RegisterNodeCamRepMsg::RegisterNodeCamRepMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:RegisterNodeCamRepMsg)
}
RegisterNodeCamRepMsg::RegisterNodeCamRepMsg(const RegisterNodeCamRepMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterNodeCamRepMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_step_){}
    , decltype(_impl_.regsiter_flag_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.channels_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_step_, &from._impl_.time_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.channels_) -
    reinterpret_cast<char*>(&_impl_.time_step_)) + sizeof(_impl_.channels_));
  // @@protoc_insertion_point(copy_constructor:RegisterNodeCamRepMsg)
}

inline void RegisterNodeCamRepMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.time_step_){0}
    , decltype(_impl_.regsiter_flag_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.channels_){0}
  };
}

RegisterNodeCamRepMsg::~RegisterNodeCamRepMsg() {
  // @@protoc_insertion_point(destructor:RegisterNodeCamRepMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterNodeCamRepMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterNodeCamRepMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterNodeCamRepMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:RegisterNodeCamRepMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.time_step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.channels_) -
        reinterpret_cast<char*>(&_impl_.time_step_)) + sizeof(_impl_.channels_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterNodeCamRepMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 time_step = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_time_step(&has_bits);
          _impl_.time_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 regsiter_flag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_regsiter_flag(&has_bits);
          _impl_.regsiter_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_channels(&has_bits);
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterNodeCamRepMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RegisterNodeCamRepMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 time_step = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_step(), target);
  }

  // optional int32 regsiter_flag = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_regsiter_flag(), target);
  }

  // optional int32 width = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_width(), target);
  }

  // optional int32 height = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // optional int32 channels = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RegisterNodeCamRepMsg)
  return target;
}

size_t RegisterNodeCamRepMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RegisterNodeCamRepMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 time_step = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_step());
    }

    // optional int32 regsiter_flag = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_regsiter_flag());
    }

    // optional int32 width = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 channels = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channels());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterNodeCamRepMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterNodeCamRepMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterNodeCamRepMsg::GetClassData() const { return &_class_data_; }


void RegisterNodeCamRepMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterNodeCamRepMsg*>(&to_msg);
  auto& from = static_cast<const RegisterNodeCamRepMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:RegisterNodeCamRepMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_step_ = from._impl_.time_step_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.regsiter_flag_ = from._impl_.regsiter_flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.channels_ = from._impl_.channels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterNodeCamRepMsg::CopyFrom(const RegisterNodeCamRepMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RegisterNodeCamRepMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterNodeCamRepMsg::IsInitialized() const {
  return true;
}

void RegisterNodeCamRepMsg::InternalSwap(RegisterNodeCamRepMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterNodeCamRepMsg, _impl_.channels_)
      + sizeof(RegisterNodeCamRepMsg::_impl_.channels_)
      - PROTOBUF_FIELD_OFFSET(RegisterNodeCamRepMsg, _impl_.time_step_)>(
          reinterpret_cast<char*>(&_impl_.time_step_),
          reinterpret_cast<char*>(&other->_impl_.time_step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterNodeCamRepMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_NodeCamMessage_2eproto_getter, &descriptor_table_NodeCamMessage_2eproto_once,
      file_level_metadata_NodeCamMessage_2eproto[1]);
}

// ===================================================================

class CamMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<CamMsg>()._impl_._has_bits_);
  static void set_has_time_step(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

CamMsg::CamMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:CamMsg)
}
CamMsg::CamMsg(const CamMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CamMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){from._impl_.image_}
    , decltype(_impl_.time_step_){}
    , decltype(_impl_.size_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_step_, &from._impl_.time_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.time_step_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:CamMsg)
}

inline void CamMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){arena}
    , decltype(_impl_.time_step_){0}
    , decltype(_impl_.size_){0}
  };
}

CamMsg::~CamMsg() {
  // @@protoc_insertion_point(destructor:CamMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CamMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.~RepeatedPtrField();
}

void CamMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CamMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:CamMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.time_step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.size_) -
        reinterpret_cast<char*>(&_impl_.time_step_)) + sizeof(_impl_.size_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CamMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .ImageMsg image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required int32 time_step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_time_step(&has_bits);
          _impl_.time_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CamMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CamMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ImageMsg image = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_image_size()); i < n; i++) {
    const auto& repfield = this->_internal_image(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 time_step = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_step(), target);
  }

  // optional int32 size = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CamMsg)
  return target;
}

size_t CamMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CamMsg)
  size_t total_size = 0;

  // required int32 time_step = 2;
  if (_internal_has_time_step()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_step());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ImageMsg image = 1;
  total_size += 1UL * this->_internal_image_size();
  for (const auto& msg : this->_impl_.image_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 size = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CamMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CamMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CamMsg::GetClassData() const { return &_class_data_; }


void CamMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CamMsg*>(&to_msg);
  auto& from = static_cast<const CamMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CamMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.image_.MergeFrom(from._impl_.image_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.time_step_ = from._impl_.time_step_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CamMsg::CopyFrom(const CamMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CamMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CamMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CamMsg::InternalSwap(CamMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.image_.InternalSwap(&other->_impl_.image_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CamMsg, _impl_.size_)
      + sizeof(CamMsg::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(CamMsg, _impl_.time_step_)>(
          reinterpret_cast<char*>(&_impl_.time_step_),
          reinterpret_cast<char*>(&other->_impl_.time_step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CamMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_NodeCamMessage_2eproto_getter, &descriptor_table_NodeCamMessage_2eproto_once,
      file_level_metadata_NodeCamMessage_2eproto[2]);
}

// ===================================================================

class ImageMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<ImageMsg>()._impl_._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_image_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_image_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_image_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ImageMsg::ImageMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ImageMsg)
}
ImageMsg::ImageMsg(const ImageMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImageMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){}
    , decltype(_impl_.image_type_){}
    , decltype(_impl_.image_height_){}
    , decltype(_impl_.image_width_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.image_type_, &from._impl_.image_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.image_width_) -
    reinterpret_cast<char*>(&_impl_.image_type_)) + sizeof(_impl_.image_width_));
  // @@protoc_insertion_point(copy_constructor:ImageMsg)
}

inline void ImageMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){}
    , decltype(_impl_.image_type_){0}
    , decltype(_impl_.image_height_){0}
    , decltype(_impl_.image_width_){0}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ImageMsg::~ImageMsg() {
  // @@protoc_insertion_point(destructor:ImageMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImageMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void ImageMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImageMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:ImageMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.image_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.image_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.image_width_) -
        reinterpret_cast<char*>(&_impl_.image_type_)) + sizeof(_impl_.image_width_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImageMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_image_type(&has_bits);
          _impl_.image_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_image_height(&has_bits);
          _impl_.image_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 image_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_image_width(&has_bits);
          _impl_.image_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImageMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ImageMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // optional int32 image_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_image_type(), target);
  }

  // optional int32 image_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_image_height(), target);
  }

  // optional int32 image_width = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_image_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ImageMsg)
  return target;
}

size_t ImageMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ImageMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image());
    }

    // optional int32 image_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_type());
    }

    // optional int32 image_height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_height());
    }

    // optional int32 image_width = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_image_width());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImageMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImageMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImageMsg::GetClassData() const { return &_class_data_; }


void ImageMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImageMsg*>(&to_msg);
  auto& from = static_cast<const ImageMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ImageMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.image_type_ = from._impl_.image_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.image_height_ = from._impl_.image_height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.image_width_ = from._impl_.image_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImageMsg::CopyFrom(const ImageMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ImageMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageMsg::IsInitialized() const {
  return true;
}

void ImageMsg::InternalSwap(ImageMsg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImageMsg, _impl_.image_width_)
      + sizeof(ImageMsg::_impl_.image_width_)
      - PROTOBUF_FIELD_OFFSET(ImageMsg, _impl_.image_type_)>(
          reinterpret_cast<char*>(&_impl_.image_type_),
          reinterpret_cast<char*>(&other->_impl_.image_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImageMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_NodeCamMessage_2eproto_getter, &descriptor_table_NodeCamMessage_2eproto_once,
      file_level_metadata_NodeCamMessage_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RegisterNodeCamReqMsg*
Arena::CreateMaybeMessage< ::RegisterNodeCamReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeCamReqMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::RegisterNodeCamRepMsg*
Arena::CreateMaybeMessage< ::RegisterNodeCamRepMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RegisterNodeCamRepMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::CamMsg*
Arena::CreateMaybeMessage< ::CamMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CamMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::ImageMsg*
Arena::CreateMaybeMessage< ::ImageMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ImageMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

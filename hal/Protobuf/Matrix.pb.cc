// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#include "Matrix.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR MatrixMsg::MatrixMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.rows_)*/0u} {}
struct MatrixMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatrixMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatrixMsgDefaultTypeInternal() {}
  union {
    MatrixMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatrixMsgDefaultTypeInternal _MatrixMsg_default_instance_;
PROTOBUF_CONSTEXPR VectorMsg::VectorMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorMsgDefaultTypeInternal() {}
  union {
    VectorMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorMsgDefaultTypeInternal _VectorMsg_default_instance_;
PROTOBUF_CONSTEXPR VectorMsgInt32::VectorMsgInt32(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._data_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorMsgInt32DefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorMsgInt32DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorMsgInt32DefaultTypeInternal() {}
  union {
    VectorMsgInt32 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorMsgInt32DefaultTypeInternal _VectorMsgInt32_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_Matrix_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Matrix_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Matrix_2eproto = nullptr;

const uint32_t TableStruct_Matrix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::MatrixMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::MatrixMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::MatrixMsg, _impl_.rows_),
  PROTOBUF_FIELD_OFFSET(::hal::MatrixMsg, _impl_.data_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hal::VectorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::VectorMsg, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hal::VectorMsgInt32, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::VectorMsgInt32, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::hal::MatrixMsg)},
  { 10, -1, -1, sizeof(::hal::VectorMsg)},
  { 17, -1, -1, sizeof(::hal::VectorMsgInt32)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_MatrixMsg_default_instance_._instance,
  &::hal::_VectorMsg_default_instance_._instance,
  &::hal::_VectorMsgInt32_default_instance_._instance,
};

const char descriptor_table_protodef_Matrix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Matrix.proto\022\003hal\"+\n\tMatrixMsg\022\014\n\004rows"
  "\030\001 \002(\r\022\020\n\004data\030\002 \003(\001B\002\020\001\"\035\n\tVectorMsg\022\020\n"
  "\004data\030\001 \003(\001B\002\020\001\"\"\n\016VectorMsgInt32\022\020\n\004dat"
  "a\030\001 \003(\005B\002\020\001"
  ;
static ::_pbi::once_flag descriptor_table_Matrix_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Matrix_2eproto = {
    false, false, 131, descriptor_table_protodef_Matrix_2eproto,
    "Matrix.proto",
    &descriptor_table_Matrix_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_Matrix_2eproto::offsets,
    file_level_metadata_Matrix_2eproto, file_level_enum_descriptors_Matrix_2eproto,
    file_level_service_descriptors_Matrix_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Matrix_2eproto_getter() {
  return &descriptor_table_Matrix_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Matrix_2eproto(&descriptor_table_Matrix_2eproto);
namespace hal {

// ===================================================================

class MatrixMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<MatrixMsg>()._impl_._has_bits_);
  static void set_has_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

MatrixMsg::MatrixMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.MatrixMsg)
}
MatrixMsg::MatrixMsg(const MatrixMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatrixMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.rows_ = from._impl_.rows_;
  // @@protoc_insertion_point(copy_constructor:hal.MatrixMsg)
}

inline void MatrixMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.data_){arena}
    , decltype(_impl_.rows_){0u}
  };
}

MatrixMsg::~MatrixMsg() {
  // @@protoc_insertion_point(destructor:hal.MatrixMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatrixMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void MatrixMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatrixMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.MatrixMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.rows_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatrixMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rows(&has_bits);
          _impl_.rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double data = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatrixMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.MatrixMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 rows = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rows(), target);
  }

  // repeated double data = 2 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.MatrixMsg)
  return target;
}

size_t MatrixMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.MatrixMsg)
  size_t total_size = 0;

  // required uint32 rows = 1;
  if (_internal_has_rows()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rows());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatrixMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatrixMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatrixMsg::GetClassData() const { return &_class_data_; }


void MatrixMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatrixMsg*>(&to_msg);
  auto& from = static_cast<const MatrixMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.MatrixMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (from._internal_has_rows()) {
    _this->_internal_set_rows(from._internal_rows());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatrixMsg::CopyFrom(const MatrixMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.MatrixMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatrixMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MatrixMsg::InternalSwap(MatrixMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  swap(_impl_.rows_, other->_impl_.rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MatrixMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Matrix_2eproto_getter, &descriptor_table_Matrix_2eproto_once,
      file_level_metadata_Matrix_2eproto[0]);
}

// ===================================================================

class VectorMsg::_Internal {
 public:
};

VectorMsg::VectorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.VectorMsg)
}
VectorMsg::VectorMsg(const VectorMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hal.VectorMsg)
}

inline void VectorMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorMsg::~VectorMsg() {
  // @@protoc_insertion_point(destructor:hal.VectorMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void VectorMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.VectorMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated double data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 9) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.VectorMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double data = 1 [packed = true];
  if (this->_internal_data_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.VectorMsg)
  return target;
}

size_t VectorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.VectorMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double data = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_data_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorMsg::GetClassData() const { return &_class_data_; }


void VectorMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorMsg*>(&to_msg);
  auto& from = static_cast<const VectorMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.VectorMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorMsg::CopyFrom(const VectorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.VectorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorMsg::IsInitialized() const {
  return true;
}

void VectorMsg::InternalSwap(VectorMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Matrix_2eproto_getter, &descriptor_table_Matrix_2eproto_once,
      file_level_metadata_Matrix_2eproto[1]);
}

// ===================================================================

class VectorMsgInt32::_Internal {
 public:
};

VectorMsgInt32::VectorMsgInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.VectorMsgInt32)
}
VectorMsgInt32::VectorMsgInt32(const VectorMsgInt32& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VectorMsgInt32* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hal.VectorMsgInt32)
}

inline void VectorMsgInt32::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , /*decltype(_impl_._data_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VectorMsgInt32::~VectorMsgInt32() {
  // @@protoc_insertion_point(destructor:hal.VectorMsgInt32)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VectorMsgInt32::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedField();
}

void VectorMsgInt32::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VectorMsgInt32::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.VectorMsgInt32)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorMsgInt32::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VectorMsgInt32::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.VectorMsgInt32)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1 [packed = true];
  {
    int byte_size = _impl_._data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.VectorMsgInt32)
  return target;
}

size_t VectorMsgInt32::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.VectorMsgInt32)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VectorMsgInt32::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VectorMsgInt32::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VectorMsgInt32::GetClassData() const { return &_class_data_; }


void VectorMsgInt32::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VectorMsgInt32*>(&to_msg);
  auto& from = static_cast<const VectorMsgInt32&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.VectorMsgInt32)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VectorMsgInt32::CopyFrom(const VectorMsgInt32& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.VectorMsgInt32)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorMsgInt32::IsInitialized() const {
  return true;
}

void VectorMsgInt32::InternalSwap(VectorMsgInt32* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorMsgInt32::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Matrix_2eproto_getter, &descriptor_table_Matrix_2eproto_once,
      file_level_metadata_Matrix_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::MatrixMsg*
Arena::CreateMaybeMessage< ::hal::MatrixMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::MatrixMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hal::VectorMsg*
Arena::CreateMaybeMessage< ::hal::VectorMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::VectorMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::hal::VectorMsgInt32*
Arena::CreateMaybeMessage< ::hal::VectorMsgInt32 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::VectorMsgInt32 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR Msg::Msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camera_)*/nullptr
  , /*decltype(_impl_.imu_)*/nullptr
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.lidar_)*/nullptr
  , /*decltype(_impl_.gamepad_)*/nullptr
  , /*decltype(_impl_.command_)*/nullptr
  , /*decltype(_impl_.vehicle_state_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0} {}
struct MsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_Messages_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Messages_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Messages_2eproto = nullptr;

const uint32_t TableStruct_Messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.camera_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.imu_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.lidar_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.gamepad_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.command_),
  PROTOBUF_FIELD_OFFSET(::hal::Msg, _impl_.vehicle_state_),
  7,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::hal::Msg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_Msg_default_instance_._instance,
};

const char descriptor_table_protodef_Messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Messages.proto\022\003hal\032\014Camera.proto\032\tImu"
  ".proto\032\nPose.proto\032\013Lidar.proto\032\rGamepad"
  ".proto\032\rCommand.proto\032\tCar.proto\"\373\001\n\003Msg"
  "\022\021\n\ttimestamp\030\001 \001(\001\022\036\n\006camera\030\002 \001(\0132\016.ha"
  "l.CameraMsg\022\030\n\003imu\030\003 \001(\0132\013.hal.ImuMsg\022\032\n"
  "\004pose\030\004 \001(\0132\014.hal.PoseMsg\022\034\n\005lidar\030\005 \001(\013"
  "2\r.hal.LidarMsg\022 \n\007gamepad\030\006 \001(\0132\017.hal.G"
  "amepadMsg\022\"\n\007command\030\007 \001(\0132\021.hal.Command"
  "erMsg\022\'\n\rvehicle_state\030\010 \001(\0132\020.hal.CarSt"
  "ateMsg"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Messages_2eproto_deps[7] = {
  &::descriptor_table_Camera_2eproto,
  &::descriptor_table_Car_2eproto,
  &::descriptor_table_Command_2eproto,
  &::descriptor_table_Gamepad_2eproto,
  &::descriptor_table_Imu_2eproto,
  &::descriptor_table_Lidar_2eproto,
  &::descriptor_table_Pose_2eproto,
};
static ::_pbi::once_flag descriptor_table_Messages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Messages_2eproto = {
    false, false, 366, descriptor_table_protodef_Messages_2eproto,
    "Messages.proto",
    &descriptor_table_Messages_2eproto_once, descriptor_table_Messages_2eproto_deps, 7, 1,
    schemas, file_default_instances, TableStruct_Messages_2eproto::offsets,
    file_level_metadata_Messages_2eproto, file_level_enum_descriptors_Messages_2eproto,
    file_level_service_descriptors_Messages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Messages_2eproto_getter() {
  return &descriptor_table_Messages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Messages_2eproto(&descriptor_table_Messages_2eproto);
namespace hal {

// ===================================================================

class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::hal::CameraMsg& camera(const Msg* msg);
  static void set_has_camera(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hal::ImuMsg& imu(const Msg* msg);
  static void set_has_imu(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hal::PoseMsg& pose(const Msg* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::hal::LidarMsg& lidar(const Msg* msg);
  static void set_has_lidar(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::hal::GamepadMsg& gamepad(const Msg* msg);
  static void set_has_gamepad(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::hal::CommanderMsg& command(const Msg* msg);
  static void set_has_command(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::hal::CarStateMsg& vehicle_state(const Msg* msg);
  static void set_has_vehicle_state(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::hal::CameraMsg&
Msg::_Internal::camera(const Msg* msg) {
  return *msg->_impl_.camera_;
}
const ::hal::ImuMsg&
Msg::_Internal::imu(const Msg* msg) {
  return *msg->_impl_.imu_;
}
const ::hal::PoseMsg&
Msg::_Internal::pose(const Msg* msg) {
  return *msg->_impl_.pose_;
}
const ::hal::LidarMsg&
Msg::_Internal::lidar(const Msg* msg) {
  return *msg->_impl_.lidar_;
}
const ::hal::GamepadMsg&
Msg::_Internal::gamepad(const Msg* msg) {
  return *msg->_impl_.gamepad_;
}
const ::hal::CommanderMsg&
Msg::_Internal::command(const Msg* msg) {
  return *msg->_impl_.command_;
}
const ::hal::CarStateMsg&
Msg::_Internal::vehicle_state(const Msg* msg) {
  return *msg->_impl_.vehicle_state_;
}
void Msg::clear_camera() {
  if (_impl_.camera_ != nullptr) _impl_.camera_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_imu() {
  if (_impl_.imu_ != nullptr) _impl_.imu_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Msg::clear_lidar() {
  if (_impl_.lidar_ != nullptr) _impl_.lidar_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Msg::clear_gamepad() {
  if (_impl_.gamepad_ != nullptr) _impl_.gamepad_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Msg::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Msg::clear_vehicle_state() {
  if (_impl_.vehicle_state_ != nullptr) _impl_.vehicle_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.lidar_){nullptr}
    , decltype(_impl_.gamepad_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.vehicle_state_){nullptr}
    , decltype(_impl_.timestamp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_camera()) {
    _this->_impl_.camera_ = new ::hal::CameraMsg(*from._impl_.camera_);
  }
  if (from._internal_has_imu()) {
    _this->_impl_.imu_ = new ::hal::ImuMsg(*from._impl_.imu_);
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::hal::PoseMsg(*from._impl_.pose_);
  }
  if (from._internal_has_lidar()) {
    _this->_impl_.lidar_ = new ::hal::LidarMsg(*from._impl_.lidar_);
  }
  if (from._internal_has_gamepad()) {
    _this->_impl_.gamepad_ = new ::hal::GamepadMsg(*from._impl_.gamepad_);
  }
  if (from._internal_has_command()) {
    _this->_impl_.command_ = new ::hal::CommanderMsg(*from._impl_.command_);
  }
  if (from._internal_has_vehicle_state()) {
    _this->_impl_.vehicle_state_ = new ::hal::CarStateMsg(*from._impl_.vehicle_state_);
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:hal.Msg)
}

inline void Msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camera_){nullptr}
    , decltype(_impl_.imu_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.lidar_){nullptr}
    , decltype(_impl_.gamepad_){nullptr}
    , decltype(_impl_.command_){nullptr}
    , decltype(_impl_.vehicle_state_){nullptr}
    , decltype(_impl_.timestamp_){0}
  };
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:hal.Msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.camera_;
  if (this != internal_default_instance()) delete _impl_.imu_;
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.lidar_;
  if (this != internal_default_instance()) delete _impl_.gamepad_;
  if (this != internal_default_instance()) delete _impl_.command_;
  if (this != internal_default_instance()) delete _impl_.vehicle_state_;
}

void Msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.camera_ != nullptr);
      _impl_.camera_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.imu_ != nullptr);
      _impl_.imu_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.pose_ != nullptr);
      _impl_.pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.lidar_ != nullptr);
      _impl_.lidar_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.gamepad_ != nullptr);
      _impl_.gamepad_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.command_ != nullptr);
      _impl_.command_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.vehicle_state_ != nullptr);
      _impl_.vehicle_state_->Clear();
    }
  }
  _impl_.timestamp_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.CameraMsg camera = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.ImuMsg imu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_imu(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.PoseMsg pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.LidarMsg lidar = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lidar(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.GamepadMsg gamepad = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_gamepad(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.CommanderMsg command = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.CarStateMsg vehicle_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional .hal.CameraMsg camera = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::camera(this),
        _Internal::camera(this).GetCachedSize(), target, stream);
  }

  // optional .hal.ImuMsg imu = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::imu(this),
        _Internal::imu(this).GetCachedSize(), target, stream);
  }

  // optional .hal.PoseMsg pose = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // optional .hal.LidarMsg lidar = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lidar(this),
        _Internal::lidar(this).GetCachedSize(), target, stream);
  }

  // optional .hal.GamepadMsg gamepad = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::gamepad(this),
        _Internal::gamepad(this).GetCachedSize(), target, stream);
  }

  // optional .hal.CommanderMsg command = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  // optional .hal.CarStateMsg vehicle_state = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vehicle_state(this),
        _Internal::vehicle_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.Msg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hal.CameraMsg camera = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.camera_);
    }

    // optional .hal.ImuMsg imu = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.imu_);
    }

    // optional .hal.PoseMsg pose = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pose_);
    }

    // optional .hal.LidarMsg lidar = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lidar_);
    }

    // optional .hal.GamepadMsg gamepad = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.gamepad_);
    }

    // optional .hal.CommanderMsg command = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.command_);
    }

    // optional .hal.CarStateMsg vehicle_state = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vehicle_state_);
    }

    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }


void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Msg*>(&to_msg);
  auto& from = static_cast<const Msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.Msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_camera()->::hal::CameraMsg::MergeFrom(
          from._internal_camera());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_imu()->::hal::ImuMsg::MergeFrom(
          from._internal_imu());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_pose()->::hal::PoseMsg::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_lidar()->::hal::LidarMsg::MergeFrom(
          from._internal_lidar());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_gamepad()->::hal::GamepadMsg::MergeFrom(
          from._internal_gamepad());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_command()->::hal::CommanderMsg::MergeFrom(
          from._internal_command());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_vehicle_state()->::hal::CarStateMsg::MergeFrom(
          from._internal_vehicle_state());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if (_internal_has_pose()) {
    if (!_impl_.pose_->IsInitialized()) return false;
  }
  if (_internal_has_lidar()) {
    if (!_impl_.lidar_->IsInitialized()) return false;
  }
  if (_internal_has_command()) {
    if (!_impl_.command_->IsInitialized()) return false;
  }
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, _impl_.timestamp_)
      + sizeof(Msg::_impl_.timestamp_)
      - PROTOBUF_FIELD_OFFSET(Msg, _impl_.camera_)>(
          reinterpret_cast<char*>(&_impl_.camera_),
          reinterpret_cast<char*>(&other->_impl_.camera_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Messages_2eproto_getter, &descriptor_table_Messages_2eproto_once,
      file_level_metadata_Messages_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::Msg*
Arena::CreateMaybeMessage< ::hal::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

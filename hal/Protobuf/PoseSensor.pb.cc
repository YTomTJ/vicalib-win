// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PoseSensor.proto

#include "PoseSensor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR PoseSensorMsg::PoseSensorMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.devicetime_)*/0
  , /*decltype(_impl_.id_)*/0} {}
struct PoseSensorMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseSensorMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseSensorMsgDefaultTypeInternal() {}
  union {
    PoseSensorMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseSensorMsgDefaultTypeInternal _PoseSensorMsg_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_PoseSensor_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_PoseSensor_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_PoseSensor_2eproto = nullptr;

const uint32_t TableStruct_PoseSensor_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::PoseSensorMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::PoseSensorMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::PoseSensorMsg, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::hal::PoseSensorMsg, _impl_.devicetime_),
  PROTOBUF_FIELD_OFFSET(::hal::PoseSensorMsg, _impl_.pose_),
  2,
  1,
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::hal::PoseSensorMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_PoseSensorMsg_default_instance_._instance,
};

const char descriptor_table_protodef_PoseSensor_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020PoseSensor.proto\022\003hal\032\nPose.proto\"K\n\rP"
  "oseSensorMsg\022\n\n\002id\030\001 \001(\005\022\022\n\ndeviceTime\030\002"
  " \001(\001\022\032\n\004pose\030\003 \001(\0132\014.hal.PoseMsg"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_PoseSensor_2eproto_deps[1] = {
  &::descriptor_table_Pose_2eproto,
};
static ::_pbi::once_flag descriptor_table_PoseSensor_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_PoseSensor_2eproto = {
    false, false, 112, descriptor_table_protodef_PoseSensor_2eproto,
    "PoseSensor.proto",
    &descriptor_table_PoseSensor_2eproto_once, descriptor_table_PoseSensor_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_PoseSensor_2eproto::offsets,
    file_level_metadata_PoseSensor_2eproto, file_level_enum_descriptors_PoseSensor_2eproto,
    file_level_service_descriptors_PoseSensor_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_PoseSensor_2eproto_getter() {
  return &descriptor_table_PoseSensor_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_PoseSensor_2eproto(&descriptor_table_PoseSensor_2eproto);
namespace hal {

// ===================================================================

class PoseSensorMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<PoseSensorMsg>()._impl_._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_devicetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::hal::PoseMsg& pose(const PoseSensorMsg* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hal::PoseMsg&
PoseSensorMsg::_Internal::pose(const PoseSensorMsg* msg) {
  return *msg->_impl_.pose_;
}
void PoseSensorMsg::clear_pose() {
  if (_impl_.pose_ != nullptr) _impl_.pose_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
PoseSensorMsg::PoseSensorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.PoseSensorMsg)
}
PoseSensorMsg::PoseSensorMsg(const PoseSensorMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PoseSensorMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.devicetime_){}
    , decltype(_impl_.id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::hal::PoseMsg(*from._impl_.pose_);
  }
  ::memcpy(&_impl_.devicetime_, &from._impl_.devicetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.devicetime_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:hal.PoseSensorMsg)
}

inline void PoseSensorMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.devicetime_){0}
    , decltype(_impl_.id_){0}
  };
}

PoseSensorMsg::~PoseSensorMsg() {
  // @@protoc_insertion_point(destructor:hal.PoseSensorMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseSensorMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pose_;
}

void PoseSensorMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PoseSensorMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.PoseSensorMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.pose_ != nullptr);
    _impl_.pose_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.devicetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.id_) -
        reinterpret_cast<char*>(&_impl_.devicetime_)) + sizeof(_impl_.id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseSensorMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double deviceTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_devicetime(&has_bits);
          _impl_.devicetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.PoseMsg pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseSensorMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.PoseSensorMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // optional double deviceTime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_devicetime(), target);
  }

  // optional .hal.PoseMsg pose = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.PoseSensorMsg)
  return target;
}

size_t PoseSensorMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.PoseSensorMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .hal.PoseMsg pose = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pose_);
    }

    // optional double deviceTime = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseSensorMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PoseSensorMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseSensorMsg::GetClassData() const { return &_class_data_; }


void PoseSensorMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PoseSensorMsg*>(&to_msg);
  auto& from = static_cast<const PoseSensorMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.PoseSensorMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pose()->::hal::PoseMsg::MergeFrom(
          from._internal_pose());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.devicetime_ = from._impl_.devicetime_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.id_ = from._impl_.id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseSensorMsg::CopyFrom(const PoseSensorMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.PoseSensorMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseSensorMsg::IsInitialized() const {
  if (_internal_has_pose()) {
    if (!_impl_.pose_->IsInitialized()) return false;
  }
  return true;
}

void PoseSensorMsg::InternalSwap(PoseSensorMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PoseSensorMsg, _impl_.id_)
      + sizeof(PoseSensorMsg::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(PoseSensorMsg, _impl_.pose_)>(
          reinterpret_cast<char*>(&_impl_.pose_),
          reinterpret_cast<char*>(&other->_impl_.pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseSensorMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_PoseSensor_2eproto_getter, &descriptor_table_PoseSensor_2eproto_once,
      file_level_metadata_PoseSensor_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::PoseSensorMsg*
Arena::CreateMaybeMessage< ::hal::PoseSensorMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::PoseSensorMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

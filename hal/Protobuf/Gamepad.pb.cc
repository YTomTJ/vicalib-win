// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gamepad.proto

#include "Gamepad.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hal {
PROTOBUF_CONSTEXPR GamepadMsg::GamepadMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.buttons_)*/nullptr
  , /*decltype(_impl_.axes_)*/nullptr
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_.vendor_id_)*/0
  , /*decltype(_impl_.product_id_)*/0
  , /*decltype(_impl_.num_buttons_)*/0
  , /*decltype(_impl_.system_time_)*/0
  , /*decltype(_impl_.num_axes_)*/0} {}
struct GamepadMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GamepadMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GamepadMsgDefaultTypeInternal() {}
  union {
    GamepadMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GamepadMsgDefaultTypeInternal _GamepadMsg_default_instance_;
}  // namespace hal
static ::_pb::Metadata file_level_metadata_Gamepad_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Gamepad_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Gamepad_2eproto = nullptr;

const uint32_t TableStruct_Gamepad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.vendor_id_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.product_id_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.num_buttons_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.num_axes_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.system_time_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.buttons_),
  PROTOBUF_FIELD_OFFSET(::hal::GamepadMsg, _impl_.axes_),
  2,
  3,
  4,
  5,
  7,
  6,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, -1, sizeof(::hal::GamepadMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hal::_GamepadMsg_default_instance_._instance,
};

const char descriptor_table_protodef_Gamepad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rGamepad.proto\022\003hal\032\014Matrix.proto\"\301\001\n\nG"
  "amepadMsg\022\021\n\tdevice_id\030\001 \001(\005\022\021\n\tvendor_i"
  "d\030\002 \001(\005\022\022\n\nproduct_id\030\003 \001(\005\022\023\n\013num_butto"
  "ns\030\004 \001(\005\022\020\n\010num_axes\030\005 \001(\005\022\023\n\013system_tim"
  "e\030\006 \001(\001\022\037\n\007buttons\030\007 \001(\0132\016.hal.VectorMsg"
  "\022\034\n\004axes\030\010 \001(\0132\016.hal.VectorMsg"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Gamepad_2eproto_deps[1] = {
  &::descriptor_table_Matrix_2eproto,
};
static ::_pbi::once_flag descriptor_table_Gamepad_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Gamepad_2eproto = {
    false, false, 230, descriptor_table_protodef_Gamepad_2eproto,
    "Gamepad.proto",
    &descriptor_table_Gamepad_2eproto_once, descriptor_table_Gamepad_2eproto_deps, 1, 1,
    schemas, file_default_instances, TableStruct_Gamepad_2eproto::offsets,
    file_level_metadata_Gamepad_2eproto, file_level_enum_descriptors_Gamepad_2eproto,
    file_level_service_descriptors_Gamepad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Gamepad_2eproto_getter() {
  return &descriptor_table_Gamepad_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Gamepad_2eproto(&descriptor_table_Gamepad_2eproto);
namespace hal {

// ===================================================================

class GamepadMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<GamepadMsg>()._impl_._has_bits_);
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_num_buttons(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_system_time(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::hal::VectorMsg& buttons(const GamepadMsg* msg);
  static void set_has_buttons(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::hal::VectorMsg& axes(const GamepadMsg* msg);
  static void set_has_axes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::hal::VectorMsg&
GamepadMsg::_Internal::buttons(const GamepadMsg* msg) {
  return *msg->_impl_.buttons_;
}
const ::hal::VectorMsg&
GamepadMsg::_Internal::axes(const GamepadMsg* msg) {
  return *msg->_impl_.axes_;
}
void GamepadMsg::clear_buttons() {
  if (_impl_.buttons_ != nullptr) _impl_.buttons_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GamepadMsg::clear_axes() {
  if (_impl_.axes_ != nullptr) _impl_.axes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GamepadMsg::GamepadMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hal.GamepadMsg)
}
GamepadMsg::GamepadMsg(const GamepadMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GamepadMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){nullptr}
    , decltype(_impl_.axes_){nullptr}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.vendor_id_){}
    , decltype(_impl_.product_id_){}
    , decltype(_impl_.num_buttons_){}
    , decltype(_impl_.system_time_){}
    , decltype(_impl_.num_axes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_buttons()) {
    _this->_impl_.buttons_ = new ::hal::VectorMsg(*from._impl_.buttons_);
  }
  if (from._internal_has_axes()) {
    _this->_impl_.axes_ = new ::hal::VectorMsg(*from._impl_.axes_);
  }
  ::memcpy(&_impl_.device_id_, &from._impl_.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_axes_) -
    reinterpret_cast<char*>(&_impl_.device_id_)) + sizeof(_impl_.num_axes_));
  // @@protoc_insertion_point(copy_constructor:hal.GamepadMsg)
}

inline void GamepadMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.buttons_){nullptr}
    , decltype(_impl_.axes_){nullptr}
    , decltype(_impl_.device_id_){0}
    , decltype(_impl_.vendor_id_){0}
    , decltype(_impl_.product_id_){0}
    , decltype(_impl_.num_buttons_){0}
    , decltype(_impl_.system_time_){0}
    , decltype(_impl_.num_axes_){0}
  };
}

GamepadMsg::~GamepadMsg() {
  // @@protoc_insertion_point(destructor:hal.GamepadMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GamepadMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.buttons_;
  if (this != internal_default_instance()) delete _impl_.axes_;
}

void GamepadMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GamepadMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:hal.GamepadMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.buttons_ != nullptr);
      _impl_.buttons_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.axes_ != nullptr);
      _impl_.axes_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.device_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.num_axes_) -
        reinterpret_cast<char*>(&_impl_.device_id_)) + sizeof(_impl_.num_axes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GamepadMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_device_id(&has_bits);
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vendor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_vendor_id(&has_bits);
          _impl_.vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 product_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_product_id(&has_bits);
          _impl_.product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_buttons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_num_buttons(&has_bits);
          _impl_.num_buttons_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_axes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_axes(&has_bits);
          _impl_.num_axes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double system_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_system_time(&has_bits);
          _impl_.system_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.VectorMsg buttons = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_buttons(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .hal.VectorMsg axes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_axes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GamepadMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hal.GamepadMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 device_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_id(), target);
  }

  // optional int32 vendor_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_vendor_id(), target);
  }

  // optional int32 product_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_product_id(), target);
  }

  // optional int32 num_buttons = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_buttons(), target);
  }

  // optional int32 num_axes = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_axes(), target);
  }

  // optional double system_time = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_system_time(), target);
  }

  // optional .hal.VectorMsg buttons = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::buttons(this),
        _Internal::buttons(this).GetCachedSize(), target, stream);
  }

  // optional .hal.VectorMsg axes = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::axes(this),
        _Internal::axes(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hal.GamepadMsg)
  return target;
}

size_t GamepadMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hal.GamepadMsg)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .hal.VectorMsg buttons = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.buttons_);
    }

    // optional .hal.VectorMsg axes = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.axes_);
    }

    // optional int32 device_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
    }

    // optional int32 vendor_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vendor_id());
    }

    // optional int32 product_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_product_id());
    }

    // optional int32 num_buttons = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_buttons());
    }

    // optional double system_time = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional int32 num_axes = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_axes());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GamepadMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GamepadMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GamepadMsg::GetClassData() const { return &_class_data_; }


void GamepadMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GamepadMsg*>(&to_msg);
  auto& from = static_cast<const GamepadMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hal.GamepadMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_buttons()->::hal::VectorMsg::MergeFrom(
          from._internal_buttons());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_axes()->::hal::VectorMsg::MergeFrom(
          from._internal_axes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.device_id_ = from._impl_.device_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.vendor_id_ = from._impl_.vendor_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.product_id_ = from._impl_.product_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.num_buttons_ = from._impl_.num_buttons_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.system_time_ = from._impl_.system_time_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.num_axes_ = from._impl_.num_axes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GamepadMsg::CopyFrom(const GamepadMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hal.GamepadMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamepadMsg::IsInitialized() const {
  return true;
}

void GamepadMsg::InternalSwap(GamepadMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GamepadMsg, _impl_.num_axes_)
      + sizeof(GamepadMsg::_impl_.num_axes_)
      - PROTOBUF_FIELD_OFFSET(GamepadMsg, _impl_.buttons_)>(
          reinterpret_cast<char*>(&_impl_.buttons_),
          reinterpret_cast<char*>(&other->_impl_.buttons_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GamepadMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Gamepad_2eproto_getter, &descriptor_table_Gamepad_2eproto_once,
      file_level_metadata_Gamepad_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hal::GamepadMsg*
Arena::CreateMaybeMessage< ::hal::GamepadMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hal::GamepadMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

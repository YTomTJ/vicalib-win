// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Matrix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Matrix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Matrix_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Matrix_2eproto;
namespace hal {
class MatrixMsg;
struct MatrixMsgDefaultTypeInternal;
extern MatrixMsgDefaultTypeInternal _MatrixMsg_default_instance_;
class VectorMsg;
struct VectorMsgDefaultTypeInternal;
extern VectorMsgDefaultTypeInternal _VectorMsg_default_instance_;
class VectorMsgInt32;
struct VectorMsgInt32DefaultTypeInternal;
extern VectorMsgInt32DefaultTypeInternal _VectorMsgInt32_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::MatrixMsg* Arena::CreateMaybeMessage<::hal::MatrixMsg>(Arena*);
template<> ::hal::VectorMsg* Arena::CreateMaybeMessage<::hal::VectorMsg>(Arena*);
template<> ::hal::VectorMsgInt32* Arena::CreateMaybeMessage<::hal::VectorMsgInt32>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class MatrixMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.MatrixMsg) */ {
 public:
  inline MatrixMsg() : MatrixMsg(nullptr) {}
  ~MatrixMsg() override;
  explicit PROTOBUF_CONSTEXPR MatrixMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatrixMsg(const MatrixMsg& from);
  MatrixMsg(MatrixMsg&& from) noexcept
    : MatrixMsg() {
    *this = ::std::move(from);
  }

  inline MatrixMsg& operator=(const MatrixMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatrixMsg& operator=(MatrixMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatrixMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatrixMsg* internal_default_instance() {
    return reinterpret_cast<const MatrixMsg*>(
               &_MatrixMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatrixMsg& a, MatrixMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MatrixMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatrixMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatrixMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatrixMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatrixMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatrixMsg& from) {
    MatrixMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatrixMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.MatrixMsg";
  }
  protected:
  explicit MatrixMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kRowsFieldNumber = 1,
  };
  // repeated double data = 2 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // required uint32 rows = 1;
  bool has_rows() const;
  private:
  bool _internal_has_rows() const;
  public:
  void clear_rows();
  uint32_t rows() const;
  void set_rows(uint32_t value);
  private:
  uint32_t _internal_rows() const;
  void _internal_set_rows(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.MatrixMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
    uint32_t rows_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Matrix_2eproto;
};
// -------------------------------------------------------------------

class VectorMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.VectorMsg) */ {
 public:
  inline VectorMsg() : VectorMsg(nullptr) {}
  ~VectorMsg() override;
  explicit PROTOBUF_CONSTEXPR VectorMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorMsg(const VectorMsg& from);
  VectorMsg(VectorMsg&& from) noexcept
    : VectorMsg() {
    *this = ::std::move(from);
  }

  inline VectorMsg& operator=(const VectorMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorMsg& operator=(VectorMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorMsg* internal_default_instance() {
    return reinterpret_cast<const VectorMsg*>(
               &_VectorMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorMsg& a, VectorMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorMsg& from) {
    VectorMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.VectorMsg";
  }
  protected:
  explicit VectorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated double data = 1 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  double _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_data() const;
  void _internal_add_data(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_data();
  public:
  double data(int index) const;
  void set_data(int index, double value);
  void add_data(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:hal.VectorMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Matrix_2eproto;
};
// -------------------------------------------------------------------

class VectorMsgInt32 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.VectorMsgInt32) */ {
 public:
  inline VectorMsgInt32() : VectorMsgInt32(nullptr) {}
  ~VectorMsgInt32() override;
  explicit PROTOBUF_CONSTEXPR VectorMsgInt32(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorMsgInt32(const VectorMsgInt32& from);
  VectorMsgInt32(VectorMsgInt32&& from) noexcept
    : VectorMsgInt32() {
    *this = ::std::move(from);
  }

  inline VectorMsgInt32& operator=(const VectorMsgInt32& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorMsgInt32& operator=(VectorMsgInt32&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorMsgInt32& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorMsgInt32* internal_default_instance() {
    return reinterpret_cast<const VectorMsgInt32*>(
               &_VectorMsgInt32_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VectorMsgInt32& a, VectorMsgInt32& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorMsgInt32* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorMsgInt32* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorMsgInt32* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorMsgInt32>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VectorMsgInt32& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VectorMsgInt32& from) {
    VectorMsgInt32::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorMsgInt32* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.VectorMsgInt32";
  }
  protected:
  explicit VectorMsgInt32(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1 [packed = true];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  int32_t _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_data() const;
  void _internal_add_data(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_data();
  public:
  int32_t data(int index) const;
  void set_data(int index, int32_t value);
  void add_data(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:hal.VectorMsgInt32)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > data_;
    mutable std::atomic<int> _data_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Matrix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatrixMsg

// required uint32 rows = 1;
inline bool MatrixMsg::_internal_has_rows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatrixMsg::has_rows() const {
  return _internal_has_rows();
}
inline void MatrixMsg::clear_rows() {
  _impl_.rows_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t MatrixMsg::_internal_rows() const {
  return _impl_.rows_;
}
inline uint32_t MatrixMsg::rows() const {
  // @@protoc_insertion_point(field_get:hal.MatrixMsg.rows)
  return _internal_rows();
}
inline void MatrixMsg::_internal_set_rows(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.rows_ = value;
}
inline void MatrixMsg::set_rows(uint32_t value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:hal.MatrixMsg.rows)
}

// repeated double data = 2 [packed = true];
inline int MatrixMsg::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int MatrixMsg::data_size() const {
  return _internal_data_size();
}
inline void MatrixMsg::clear_data() {
  _impl_.data_.Clear();
}
inline double MatrixMsg::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline double MatrixMsg::data(int index) const {
  // @@protoc_insertion_point(field_get:hal.MatrixMsg.data)
  return _internal_data(index);
}
inline void MatrixMsg::set_data(int index, double value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:hal.MatrixMsg.data)
}
inline void MatrixMsg::_internal_add_data(double value) {
  _impl_.data_.Add(value);
}
inline void MatrixMsg::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:hal.MatrixMsg.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MatrixMsg::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
MatrixMsg::data() const {
  // @@protoc_insertion_point(field_list:hal.MatrixMsg.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MatrixMsg::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
MatrixMsg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:hal.MatrixMsg.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// VectorMsg

// repeated double data = 1 [packed = true];
inline int VectorMsg::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int VectorMsg::data_size() const {
  return _internal_data_size();
}
inline void VectorMsg::clear_data() {
  _impl_.data_.Clear();
}
inline double VectorMsg::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline double VectorMsg::data(int index) const {
  // @@protoc_insertion_point(field_get:hal.VectorMsg.data)
  return _internal_data(index);
}
inline void VectorMsg::set_data(int index, double value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:hal.VectorMsg.data)
}
inline void VectorMsg::_internal_add_data(double value) {
  _impl_.data_.Add(value);
}
inline void VectorMsg::add_data(double value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:hal.VectorMsg.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorMsg::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorMsg::data() const {
  // @@protoc_insertion_point(field_list:hal.VectorMsg.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorMsg::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorMsg::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:hal.VectorMsg.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// VectorMsgInt32

// repeated int32 data = 1 [packed = true];
inline int VectorMsgInt32::_internal_data_size() const {
  return _impl_.data_.size();
}
inline int VectorMsgInt32::data_size() const {
  return _internal_data_size();
}
inline void VectorMsgInt32::clear_data() {
  _impl_.data_.Clear();
}
inline int32_t VectorMsgInt32::_internal_data(int index) const {
  return _impl_.data_.Get(index);
}
inline int32_t VectorMsgInt32::data(int index) const {
  // @@protoc_insertion_point(field_get:hal.VectorMsgInt32.data)
  return _internal_data(index);
}
inline void VectorMsgInt32::set_data(int index, int32_t value) {
  _impl_.data_.Set(index, value);
  // @@protoc_insertion_point(field_set:hal.VectorMsgInt32.data)
}
inline void VectorMsgInt32::_internal_add_data(int32_t value) {
  _impl_.data_.Add(value);
}
inline void VectorMsgInt32::add_data(int32_t value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:hal.VectorMsgInt32.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorMsgInt32::_internal_data() const {
  return _impl_.data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
VectorMsgInt32::data() const {
  // @@protoc_insertion_point(field_list:hal.VectorMsgInt32.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorMsgInt32::_internal_mutable_data() {
  return &_impl_.data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
VectorMsgInt32::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:hal.VectorMsgInt32.data)
  return _internal_mutable_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Matrix_2eproto

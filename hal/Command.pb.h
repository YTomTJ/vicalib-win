// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Command.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Command_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Command_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Command_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Command_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Command_2eproto;
namespace hal {
class CommanderMsg;
struct CommanderMsgDefaultTypeInternal;
extern CommanderMsgDefaultTypeInternal _CommanderMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::CommanderMsg* Arena::CreateMaybeMessage<::hal::CommanderMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class CommanderMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.CommanderMsg) */ {
 public:
  inline CommanderMsg() : CommanderMsg(nullptr) {}
  ~CommanderMsg() override;
  explicit PROTOBUF_CONSTEXPR CommanderMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommanderMsg(const CommanderMsg& from);
  CommanderMsg(CommanderMsg&& from) noexcept
    : CommanderMsg() {
    *this = ::std::move(from);
  }

  inline CommanderMsg& operator=(const CommanderMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommanderMsg& operator=(CommanderMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommanderMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommanderMsg* internal_default_instance() {
    return reinterpret_cast<const CommanderMsg*>(
               &_CommanderMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommanderMsg& a, CommanderMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CommanderMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommanderMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommanderMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommanderMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommanderMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommanderMsg& from) {
    CommanderMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommanderMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.CommanderMsg";
  }
  protected:
  explicit CommanderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTorquesFieldNumber = 4,
    kForceFieldNumber = 2,
    kCurvatureFieldNumber = 3,
    kForceDtFieldNumber = 5,
    kWorldIdFieldNumber = 1,
    kNoDelayFieldNumber = 7,
    kNoUpdateFieldNumber = 8,
    kPhiFieldNumber = 6,
  };
  // required .hal.VectorMsg torques = 4;
  bool has_torques() const;
  private:
  bool _internal_has_torques() const;
  public:
  void clear_torques();
  const ::hal::VectorMsg& torques() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_torques();
  ::hal::VectorMsg* mutable_torques();
  void set_allocated_torques(::hal::VectorMsg* torques);
  private:
  const ::hal::VectorMsg& _internal_torques() const;
  ::hal::VectorMsg* _internal_mutable_torques();
  public:
  void unsafe_arena_set_allocated_torques(
      ::hal::VectorMsg* torques);
  ::hal::VectorMsg* unsafe_arena_release_torques();

  // required double force = 2;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  double force() const;
  void set_force(double value);
  private:
  double _internal_force() const;
  void _internal_set_force(double value);
  public:

  // required double curvature = 3;
  bool has_curvature() const;
  private:
  bool _internal_has_curvature() const;
  public:
  void clear_curvature();
  double curvature() const;
  void set_curvature(double value);
  private:
  double _internal_curvature() const;
  void _internal_set_curvature(double value);
  public:

  // required double forceDt = 5;
  bool has_forcedt() const;
  private:
  bool _internal_has_forcedt() const;
  public:
  void clear_forcedt();
  double forcedt() const;
  void set_forcedt(double value);
  private:
  double _internal_forcedt() const;
  void _internal_set_forcedt(double value);
  public:

  // required int32 worldId = 1;
  bool has_worldid() const;
  private:
  bool _internal_has_worldid() const;
  public:
  void clear_worldid();
  int32_t worldid() const;
  void set_worldid(int32_t value);
  private:
  int32_t _internal_worldid() const;
  void _internal_set_worldid(int32_t value);
  public:

  // required bool noDelay = 7;
  bool has_nodelay() const;
  private:
  bool _internal_has_nodelay() const;
  public:
  void clear_nodelay();
  bool nodelay() const;
  void set_nodelay(bool value);
  private:
  bool _internal_nodelay() const;
  void _internal_set_nodelay(bool value);
  public:

  // required bool noUpdate = 8;
  bool has_noupdate() const;
  private:
  bool _internal_has_noupdate() const;
  public:
  void clear_noupdate();
  bool noupdate() const;
  void set_noupdate(bool value);
  private:
  bool _internal_noupdate() const;
  void _internal_set_noupdate(bool value);
  public:

  // required double phi = 6;
  bool has_phi() const;
  private:
  bool _internal_has_phi() const;
  public:
  void clear_phi();
  double phi() const;
  void set_phi(double value);
  private:
  double _internal_phi() const;
  void _internal_set_phi(double value);
  public:

  // @@protoc_insertion_point(class_scope:hal.CommanderMsg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hal::VectorMsg* torques_;
    double force_;
    double curvature_;
    double forcedt_;
    int32_t worldid_;
    bool nodelay_;
    bool noupdate_;
    double phi_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Command_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommanderMsg

// required int32 worldId = 1;
inline bool CommanderMsg::_internal_has_worldid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CommanderMsg::has_worldid() const {
  return _internal_has_worldid();
}
inline void CommanderMsg::clear_worldid() {
  _impl_.worldid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t CommanderMsg::_internal_worldid() const {
  return _impl_.worldid_;
}
inline int32_t CommanderMsg::worldid() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.worldId)
  return _internal_worldid();
}
inline void CommanderMsg::_internal_set_worldid(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.worldid_ = value;
}
inline void CommanderMsg::set_worldid(int32_t value) {
  _internal_set_worldid(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.worldId)
}

// required double force = 2;
inline bool CommanderMsg::_internal_has_force() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommanderMsg::has_force() const {
  return _internal_has_force();
}
inline void CommanderMsg::clear_force() {
  _impl_.force_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CommanderMsg::_internal_force() const {
  return _impl_.force_;
}
inline double CommanderMsg::force() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.force)
  return _internal_force();
}
inline void CommanderMsg::_internal_set_force(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.force_ = value;
}
inline void CommanderMsg::set_force(double value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.force)
}

// required double curvature = 3;
inline bool CommanderMsg::_internal_has_curvature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CommanderMsg::has_curvature() const {
  return _internal_has_curvature();
}
inline void CommanderMsg::clear_curvature() {
  _impl_.curvature_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CommanderMsg::_internal_curvature() const {
  return _impl_.curvature_;
}
inline double CommanderMsg::curvature() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.curvature)
  return _internal_curvature();
}
inline void CommanderMsg::_internal_set_curvature(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.curvature_ = value;
}
inline void CommanderMsg::set_curvature(double value) {
  _internal_set_curvature(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.curvature)
}

// required .hal.VectorMsg torques = 4;
inline bool CommanderMsg::_internal_has_torques() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.torques_ != nullptr);
  return value;
}
inline bool CommanderMsg::has_torques() const {
  return _internal_has_torques();
}
inline const ::hal::VectorMsg& CommanderMsg::_internal_torques() const {
  const ::hal::VectorMsg* p = _impl_.torques_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& CommanderMsg::torques() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.torques)
  return _internal_torques();
}
inline void CommanderMsg::unsafe_arena_set_allocated_torques(
    ::hal::VectorMsg* torques) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torques_);
  }
  _impl_.torques_ = torques;
  if (torques) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.CommanderMsg.torques)
}
inline ::hal::VectorMsg* CommanderMsg::release_torques() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.torques_;
  _impl_.torques_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* CommanderMsg::unsafe_arena_release_torques() {
  // @@protoc_insertion_point(field_release:hal.CommanderMsg.torques)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.torques_;
  _impl_.torques_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* CommanderMsg::_internal_mutable_torques() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.torques_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.torques_ = p;
  }
  return _impl_.torques_;
}
inline ::hal::VectorMsg* CommanderMsg::mutable_torques() {
  ::hal::VectorMsg* _msg = _internal_mutable_torques();
  // @@protoc_insertion_point(field_mutable:hal.CommanderMsg.torques)
  return _msg;
}
inline void CommanderMsg::set_allocated_torques(::hal::VectorMsg* torques) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.torques_);
  }
  if (torques) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(torques));
    if (message_arena != submessage_arena) {
      torques = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, torques, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.torques_ = torques;
  // @@protoc_insertion_point(field_set_allocated:hal.CommanderMsg.torques)
}

// required double forceDt = 5;
inline bool CommanderMsg::_internal_has_forcedt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CommanderMsg::has_forcedt() const {
  return _internal_has_forcedt();
}
inline void CommanderMsg::clear_forcedt() {
  _impl_.forcedt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double CommanderMsg::_internal_forcedt() const {
  return _impl_.forcedt_;
}
inline double CommanderMsg::forcedt() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.forceDt)
  return _internal_forcedt();
}
inline void CommanderMsg::_internal_set_forcedt(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.forcedt_ = value;
}
inline void CommanderMsg::set_forcedt(double value) {
  _internal_set_forcedt(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.forceDt)
}

// required double phi = 6;
inline bool CommanderMsg::_internal_has_phi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CommanderMsg::has_phi() const {
  return _internal_has_phi();
}
inline void CommanderMsg::clear_phi() {
  _impl_.phi_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double CommanderMsg::_internal_phi() const {
  return _impl_.phi_;
}
inline double CommanderMsg::phi() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.phi)
  return _internal_phi();
}
inline void CommanderMsg::_internal_set_phi(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.phi_ = value;
}
inline void CommanderMsg::set_phi(double value) {
  _internal_set_phi(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.phi)
}

// required bool noDelay = 7;
inline bool CommanderMsg::_internal_has_nodelay() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CommanderMsg::has_nodelay() const {
  return _internal_has_nodelay();
}
inline void CommanderMsg::clear_nodelay() {
  _impl_.nodelay_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool CommanderMsg::_internal_nodelay() const {
  return _impl_.nodelay_;
}
inline bool CommanderMsg::nodelay() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.noDelay)
  return _internal_nodelay();
}
inline void CommanderMsg::_internal_set_nodelay(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.nodelay_ = value;
}
inline void CommanderMsg::set_nodelay(bool value) {
  _internal_set_nodelay(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.noDelay)
}

// required bool noUpdate = 8;
inline bool CommanderMsg::_internal_has_noupdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CommanderMsg::has_noupdate() const {
  return _internal_has_noupdate();
}
inline void CommanderMsg::clear_noupdate() {
  _impl_.noupdate_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CommanderMsg::_internal_noupdate() const {
  return _impl_.noupdate_;
}
inline bool CommanderMsg::noupdate() const {
  // @@protoc_insertion_point(field_get:hal.CommanderMsg.noUpdate)
  return _internal_noupdate();
}
inline void CommanderMsg::_internal_set_noupdate(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.noupdate_ = value;
}
inline void CommanderMsg::set_noupdate(bool value) {
  _internal_set_noupdate(value);
  // @@protoc_insertion_point(field_set:hal.CommanderMsg.noUpdate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Command_2eproto

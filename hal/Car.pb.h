// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Car.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Car_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Car_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Car_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Car_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Car_2eproto;
namespace hal {
class CarCommandMsg;
struct CarCommandMsgDefaultTypeInternal;
extern CarCommandMsgDefaultTypeInternal _CarCommandMsg_default_instance_;
class CarSettingMsg;
struct CarSettingMsgDefaultTypeInternal;
extern CarSettingMsgDefaultTypeInternal _CarSettingMsg_default_instance_;
class CarStateMsg;
struct CarStateMsgDefaultTypeInternal;
extern CarStateMsgDefaultTypeInternal _CarStateMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::CarCommandMsg* Arena::CreateMaybeMessage<::hal::CarCommandMsg>(Arena*);
template<> ::hal::CarSettingMsg* Arena::CreateMaybeMessage<::hal::CarSettingMsg>(Arena*);
template<> ::hal::CarStateMsg* Arena::CreateMaybeMessage<::hal::CarStateMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class CarStateMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.CarStateMsg) */ {
 public:
  inline CarStateMsg() : CarStateMsg(nullptr) {}
  ~CarStateMsg() override;
  explicit PROTOBUF_CONSTEXPR CarStateMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarStateMsg(const CarStateMsg& from);
  CarStateMsg(CarStateMsg&& from) noexcept
    : CarStateMsg() {
    *this = ::std::move(from);
  }

  inline CarStateMsg& operator=(const CarStateMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarStateMsg& operator=(CarStateMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarStateMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarStateMsg* internal_default_instance() {
    return reinterpret_cast<const CarStateMsg*>(
               &_CarStateMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CarStateMsg& a, CarStateMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CarStateMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarStateMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarStateMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarStateMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarStateMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarStateMsg& from) {
    CarStateMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarStateMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.CarStateMsg";
  }
  protected:
  explicit CarStateMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteerAngleFieldNumber = 1,
    kRearSteerAngleFieldNumber = 2,
    kMotorCurrentFieldNumber = 3,
    kBattVoltFieldNumber = 4,
    kWheelSpeedFlFieldNumber = 5,
    kWheelSpeedFrFieldNumber = 6,
    kWheelSpeedRlFieldNumber = 7,
    kWheelSpeedRrFieldNumber = 8,
    kSwingAngleFlFieldNumber = 9,
    kSwingAngleFrFieldNumber = 10,
    kSwingAngleRlFieldNumber = 11,
    kSwingAngleRrFieldNumber = 12,
    kDeviceTimeFieldNumber = 13,
  };
  // optional double steer_angle = 1;
  bool has_steer_angle() const;
  private:
  bool _internal_has_steer_angle() const;
  public:
  void clear_steer_angle();
  double steer_angle() const;
  void set_steer_angle(double value);
  private:
  double _internal_steer_angle() const;
  void _internal_set_steer_angle(double value);
  public:

  // optional double rear_steer_angle = 2;
  bool has_rear_steer_angle() const;
  private:
  bool _internal_has_rear_steer_angle() const;
  public:
  void clear_rear_steer_angle();
  double rear_steer_angle() const;
  void set_rear_steer_angle(double value);
  private:
  double _internal_rear_steer_angle() const;
  void _internal_set_rear_steer_angle(double value);
  public:

  // optional int32 motor_current = 3;
  bool has_motor_current() const;
  private:
  bool _internal_has_motor_current() const;
  public:
  void clear_motor_current();
  int32_t motor_current() const;
  void set_motor_current(int32_t value);
  private:
  int32_t _internal_motor_current() const;
  void _internal_set_motor_current(int32_t value);
  public:

  // optional int32 batt_volt = 4;
  bool has_batt_volt() const;
  private:
  bool _internal_has_batt_volt() const;
  public:
  void clear_batt_volt();
  int32_t batt_volt() const;
  void set_batt_volt(int32_t value);
  private:
  int32_t _internal_batt_volt() const;
  void _internal_set_batt_volt(int32_t value);
  public:

  // optional double wheel_speed_fl = 5;
  bool has_wheel_speed_fl() const;
  private:
  bool _internal_has_wheel_speed_fl() const;
  public:
  void clear_wheel_speed_fl();
  double wheel_speed_fl() const;
  void set_wheel_speed_fl(double value);
  private:
  double _internal_wheel_speed_fl() const;
  void _internal_set_wheel_speed_fl(double value);
  public:

  // optional double wheel_speed_fr = 6;
  bool has_wheel_speed_fr() const;
  private:
  bool _internal_has_wheel_speed_fr() const;
  public:
  void clear_wheel_speed_fr();
  double wheel_speed_fr() const;
  void set_wheel_speed_fr(double value);
  private:
  double _internal_wheel_speed_fr() const;
  void _internal_set_wheel_speed_fr(double value);
  public:

  // optional double wheel_speed_rl = 7;
  bool has_wheel_speed_rl() const;
  private:
  bool _internal_has_wheel_speed_rl() const;
  public:
  void clear_wheel_speed_rl();
  double wheel_speed_rl() const;
  void set_wheel_speed_rl(double value);
  private:
  double _internal_wheel_speed_rl() const;
  void _internal_set_wheel_speed_rl(double value);
  public:

  // optional double wheel_speed_rr = 8;
  bool has_wheel_speed_rr() const;
  private:
  bool _internal_has_wheel_speed_rr() const;
  public:
  void clear_wheel_speed_rr();
  double wheel_speed_rr() const;
  void set_wheel_speed_rr(double value);
  private:
  double _internal_wheel_speed_rr() const;
  void _internal_set_wheel_speed_rr(double value);
  public:

  // optional double swing_angle_fl = 9;
  bool has_swing_angle_fl() const;
  private:
  bool _internal_has_swing_angle_fl() const;
  public:
  void clear_swing_angle_fl();
  double swing_angle_fl() const;
  void set_swing_angle_fl(double value);
  private:
  double _internal_swing_angle_fl() const;
  void _internal_set_swing_angle_fl(double value);
  public:

  // optional double swing_angle_fr = 10;
  bool has_swing_angle_fr() const;
  private:
  bool _internal_has_swing_angle_fr() const;
  public:
  void clear_swing_angle_fr();
  double swing_angle_fr() const;
  void set_swing_angle_fr(double value);
  private:
  double _internal_swing_angle_fr() const;
  void _internal_set_swing_angle_fr(double value);
  public:

  // optional double swing_angle_rl = 11;
  bool has_swing_angle_rl() const;
  private:
  bool _internal_has_swing_angle_rl() const;
  public:
  void clear_swing_angle_rl();
  double swing_angle_rl() const;
  void set_swing_angle_rl(double value);
  private:
  double _internal_swing_angle_rl() const;
  void _internal_set_swing_angle_rl(double value);
  public:

  // optional double swing_angle_rr = 12;
  bool has_swing_angle_rr() const;
  private:
  bool _internal_has_swing_angle_rr() const;
  public:
  void clear_swing_angle_rr();
  double swing_angle_rr() const;
  void set_swing_angle_rr(double value);
  private:
  double _internal_swing_angle_rr() const;
  void _internal_set_swing_angle_rr(double value);
  public:

  // optional int32 device_time = 13;
  bool has_device_time() const;
  private:
  bool _internal_has_device_time() const;
  public:
  void clear_device_time();
  int32_t device_time() const;
  void set_device_time(int32_t value);
  private:
  int32_t _internal_device_time() const;
  void _internal_set_device_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.CarStateMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double steer_angle_;
    double rear_steer_angle_;
    int32_t motor_current_;
    int32_t batt_volt_;
    double wheel_speed_fl_;
    double wheel_speed_fr_;
    double wheel_speed_rl_;
    double wheel_speed_rr_;
    double swing_angle_fl_;
    double swing_angle_fr_;
    double swing_angle_rl_;
    double swing_angle_rr_;
    int32_t device_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Car_2eproto;
};
// -------------------------------------------------------------------

class CarCommandMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.CarCommandMsg) */ {
 public:
  inline CarCommandMsg() : CarCommandMsg(nullptr) {}
  ~CarCommandMsg() override;
  explicit PROTOBUF_CONSTEXPR CarCommandMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarCommandMsg(const CarCommandMsg& from);
  CarCommandMsg(CarCommandMsg&& from) noexcept
    : CarCommandMsg() {
    *this = ::std::move(from);
  }

  inline CarCommandMsg& operator=(const CarCommandMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarCommandMsg& operator=(CarCommandMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarCommandMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarCommandMsg* internal_default_instance() {
    return reinterpret_cast<const CarCommandMsg*>(
               &_CarCommandMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CarCommandMsg& a, CarCommandMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CarCommandMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarCommandMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarCommandMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarCommandMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarCommandMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarCommandMsg& from) {
    CarCommandMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarCommandMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.CarCommandMsg";
  }
  protected:
  explicit CarCommandMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSteeringAngleFieldNumber = 1,
    kRearSteeringAngleFieldNumber = 2,
    kThrottlePercentFieldNumber = 3,
    kDeviceTimeFieldNumber = 4,
  };
  // optional double steering_angle = 1;
  bool has_steering_angle() const;
  private:
  bool _internal_has_steering_angle() const;
  public:
  void clear_steering_angle();
  double steering_angle() const;
  void set_steering_angle(double value);
  private:
  double _internal_steering_angle() const;
  void _internal_set_steering_angle(double value);
  public:

  // optional double rear_steering_angle = 2;
  bool has_rear_steering_angle() const;
  private:
  bool _internal_has_rear_steering_angle() const;
  public:
  void clear_rear_steering_angle();
  double rear_steering_angle() const;
  void set_rear_steering_angle(double value);
  private:
  double _internal_rear_steering_angle() const;
  void _internal_set_rear_steering_angle(double value);
  public:

  // optional double throttle_percent = 3;
  bool has_throttle_percent() const;
  private:
  bool _internal_has_throttle_percent() const;
  public:
  void clear_throttle_percent();
  double throttle_percent() const;
  void set_throttle_percent(double value);
  private:
  double _internal_throttle_percent() const;
  void _internal_set_throttle_percent(double value);
  public:

  // optional int32 device_time = 4;
  bool has_device_time() const;
  private:
  bool _internal_has_device_time() const;
  public:
  void clear_device_time();
  int32_t device_time() const;
  void set_device_time(int32_t value);
  private:
  int32_t _internal_device_time() const;
  void _internal_set_device_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.CarCommandMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double steering_angle_;
    double rear_steering_angle_;
    double throttle_percent_;
    int32_t device_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Car_2eproto;
};
// -------------------------------------------------------------------

class CarSettingMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.CarSettingMsg) */ {
 public:
  inline CarSettingMsg() : CarSettingMsg(nullptr) {}
  ~CarSettingMsg() override;
  explicit PROTOBUF_CONSTEXPR CarSettingMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarSettingMsg(const CarSettingMsg& from);
  CarSettingMsg(CarSettingMsg&& from) noexcept
    : CarSettingMsg() {
    *this = ::std::move(from);
  }

  inline CarSettingMsg& operator=(const CarSettingMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarSettingMsg& operator=(CarSettingMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarSettingMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CarSettingMsg* internal_default_instance() {
    return reinterpret_cast<const CarSettingMsg*>(
               &_CarSettingMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CarSettingMsg& a, CarSettingMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CarSettingMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarSettingMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarSettingMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarSettingMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarSettingMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarSettingMsg& from) {
    CarSettingMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarSettingMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.CarSettingMsg";
  }
  protected:
  explicit CarSettingMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAccLimitFieldNumber = 1,
  };
  // optional int32 max_acc_limit = 1;
  bool has_max_acc_limit() const;
  private:
  bool _internal_has_max_acc_limit() const;
  public:
  void clear_max_acc_limit();
  int32_t max_acc_limit() const;
  void set_max_acc_limit(int32_t value);
  private:
  int32_t _internal_max_acc_limit() const;
  void _internal_set_max_acc_limit(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.CarSettingMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t max_acc_limit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Car_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarStateMsg

// optional double steer_angle = 1;
inline bool CarStateMsg::_internal_has_steer_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CarStateMsg::has_steer_angle() const {
  return _internal_has_steer_angle();
}
inline void CarStateMsg::clear_steer_angle() {
  _impl_.steer_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CarStateMsg::_internal_steer_angle() const {
  return _impl_.steer_angle_;
}
inline double CarStateMsg::steer_angle() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.steer_angle)
  return _internal_steer_angle();
}
inline void CarStateMsg::_internal_set_steer_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steer_angle_ = value;
}
inline void CarStateMsg::set_steer_angle(double value) {
  _internal_set_steer_angle(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.steer_angle)
}

// optional double rear_steer_angle = 2;
inline bool CarStateMsg::_internal_has_rear_steer_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CarStateMsg::has_rear_steer_angle() const {
  return _internal_has_rear_steer_angle();
}
inline void CarStateMsg::clear_rear_steer_angle() {
  _impl_.rear_steer_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CarStateMsg::_internal_rear_steer_angle() const {
  return _impl_.rear_steer_angle_;
}
inline double CarStateMsg::rear_steer_angle() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.rear_steer_angle)
  return _internal_rear_steer_angle();
}
inline void CarStateMsg::_internal_set_rear_steer_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rear_steer_angle_ = value;
}
inline void CarStateMsg::set_rear_steer_angle(double value) {
  _internal_set_rear_steer_angle(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.rear_steer_angle)
}

// optional int32 motor_current = 3;
inline bool CarStateMsg::_internal_has_motor_current() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CarStateMsg::has_motor_current() const {
  return _internal_has_motor_current();
}
inline void CarStateMsg::clear_motor_current() {
  _impl_.motor_current_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CarStateMsg::_internal_motor_current() const {
  return _impl_.motor_current_;
}
inline int32_t CarStateMsg::motor_current() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.motor_current)
  return _internal_motor_current();
}
inline void CarStateMsg::_internal_set_motor_current(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.motor_current_ = value;
}
inline void CarStateMsg::set_motor_current(int32_t value) {
  _internal_set_motor_current(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.motor_current)
}

// optional int32 batt_volt = 4;
inline bool CarStateMsg::_internal_has_batt_volt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CarStateMsg::has_batt_volt() const {
  return _internal_has_batt_volt();
}
inline void CarStateMsg::clear_batt_volt() {
  _impl_.batt_volt_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CarStateMsg::_internal_batt_volt() const {
  return _impl_.batt_volt_;
}
inline int32_t CarStateMsg::batt_volt() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.batt_volt)
  return _internal_batt_volt();
}
inline void CarStateMsg::_internal_set_batt_volt(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.batt_volt_ = value;
}
inline void CarStateMsg::set_batt_volt(int32_t value) {
  _internal_set_batt_volt(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.batt_volt)
}

// optional double wheel_speed_fl = 5;
inline bool CarStateMsg::_internal_has_wheel_speed_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CarStateMsg::has_wheel_speed_fl() const {
  return _internal_has_wheel_speed_fl();
}
inline void CarStateMsg::clear_wheel_speed_fl() {
  _impl_.wheel_speed_fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double CarStateMsg::_internal_wheel_speed_fl() const {
  return _impl_.wheel_speed_fl_;
}
inline double CarStateMsg::wheel_speed_fl() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.wheel_speed_fl)
  return _internal_wheel_speed_fl();
}
inline void CarStateMsg::_internal_set_wheel_speed_fl(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.wheel_speed_fl_ = value;
}
inline void CarStateMsg::set_wheel_speed_fl(double value) {
  _internal_set_wheel_speed_fl(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.wheel_speed_fl)
}

// optional double wheel_speed_fr = 6;
inline bool CarStateMsg::_internal_has_wheel_speed_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CarStateMsg::has_wheel_speed_fr() const {
  return _internal_has_wheel_speed_fr();
}
inline void CarStateMsg::clear_wheel_speed_fr() {
  _impl_.wheel_speed_fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double CarStateMsg::_internal_wheel_speed_fr() const {
  return _impl_.wheel_speed_fr_;
}
inline double CarStateMsg::wheel_speed_fr() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.wheel_speed_fr)
  return _internal_wheel_speed_fr();
}
inline void CarStateMsg::_internal_set_wheel_speed_fr(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.wheel_speed_fr_ = value;
}
inline void CarStateMsg::set_wheel_speed_fr(double value) {
  _internal_set_wheel_speed_fr(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.wheel_speed_fr)
}

// optional double wheel_speed_rl = 7;
inline bool CarStateMsg::_internal_has_wheel_speed_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CarStateMsg::has_wheel_speed_rl() const {
  return _internal_has_wheel_speed_rl();
}
inline void CarStateMsg::clear_wheel_speed_rl() {
  _impl_.wheel_speed_rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double CarStateMsg::_internal_wheel_speed_rl() const {
  return _impl_.wheel_speed_rl_;
}
inline double CarStateMsg::wheel_speed_rl() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.wheel_speed_rl)
  return _internal_wheel_speed_rl();
}
inline void CarStateMsg::_internal_set_wheel_speed_rl(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.wheel_speed_rl_ = value;
}
inline void CarStateMsg::set_wheel_speed_rl(double value) {
  _internal_set_wheel_speed_rl(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.wheel_speed_rl)
}

// optional double wheel_speed_rr = 8;
inline bool CarStateMsg::_internal_has_wheel_speed_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CarStateMsg::has_wheel_speed_rr() const {
  return _internal_has_wheel_speed_rr();
}
inline void CarStateMsg::clear_wheel_speed_rr() {
  _impl_.wheel_speed_rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double CarStateMsg::_internal_wheel_speed_rr() const {
  return _impl_.wheel_speed_rr_;
}
inline double CarStateMsg::wheel_speed_rr() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.wheel_speed_rr)
  return _internal_wheel_speed_rr();
}
inline void CarStateMsg::_internal_set_wheel_speed_rr(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.wheel_speed_rr_ = value;
}
inline void CarStateMsg::set_wheel_speed_rr(double value) {
  _internal_set_wheel_speed_rr(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.wheel_speed_rr)
}

// optional double swing_angle_fl = 9;
inline bool CarStateMsg::_internal_has_swing_angle_fl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CarStateMsg::has_swing_angle_fl() const {
  return _internal_has_swing_angle_fl();
}
inline void CarStateMsg::clear_swing_angle_fl() {
  _impl_.swing_angle_fl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double CarStateMsg::_internal_swing_angle_fl() const {
  return _impl_.swing_angle_fl_;
}
inline double CarStateMsg::swing_angle_fl() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.swing_angle_fl)
  return _internal_swing_angle_fl();
}
inline void CarStateMsg::_internal_set_swing_angle_fl(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.swing_angle_fl_ = value;
}
inline void CarStateMsg::set_swing_angle_fl(double value) {
  _internal_set_swing_angle_fl(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.swing_angle_fl)
}

// optional double swing_angle_fr = 10;
inline bool CarStateMsg::_internal_has_swing_angle_fr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CarStateMsg::has_swing_angle_fr() const {
  return _internal_has_swing_angle_fr();
}
inline void CarStateMsg::clear_swing_angle_fr() {
  _impl_.swing_angle_fr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double CarStateMsg::_internal_swing_angle_fr() const {
  return _impl_.swing_angle_fr_;
}
inline double CarStateMsg::swing_angle_fr() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.swing_angle_fr)
  return _internal_swing_angle_fr();
}
inline void CarStateMsg::_internal_set_swing_angle_fr(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.swing_angle_fr_ = value;
}
inline void CarStateMsg::set_swing_angle_fr(double value) {
  _internal_set_swing_angle_fr(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.swing_angle_fr)
}

// optional double swing_angle_rl = 11;
inline bool CarStateMsg::_internal_has_swing_angle_rl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CarStateMsg::has_swing_angle_rl() const {
  return _internal_has_swing_angle_rl();
}
inline void CarStateMsg::clear_swing_angle_rl() {
  _impl_.swing_angle_rl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double CarStateMsg::_internal_swing_angle_rl() const {
  return _impl_.swing_angle_rl_;
}
inline double CarStateMsg::swing_angle_rl() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.swing_angle_rl)
  return _internal_swing_angle_rl();
}
inline void CarStateMsg::_internal_set_swing_angle_rl(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.swing_angle_rl_ = value;
}
inline void CarStateMsg::set_swing_angle_rl(double value) {
  _internal_set_swing_angle_rl(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.swing_angle_rl)
}

// optional double swing_angle_rr = 12;
inline bool CarStateMsg::_internal_has_swing_angle_rr() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CarStateMsg::has_swing_angle_rr() const {
  return _internal_has_swing_angle_rr();
}
inline void CarStateMsg::clear_swing_angle_rr() {
  _impl_.swing_angle_rr_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double CarStateMsg::_internal_swing_angle_rr() const {
  return _impl_.swing_angle_rr_;
}
inline double CarStateMsg::swing_angle_rr() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.swing_angle_rr)
  return _internal_swing_angle_rr();
}
inline void CarStateMsg::_internal_set_swing_angle_rr(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.swing_angle_rr_ = value;
}
inline void CarStateMsg::set_swing_angle_rr(double value) {
  _internal_set_swing_angle_rr(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.swing_angle_rr)
}

// optional int32 device_time = 13;
inline bool CarStateMsg::_internal_has_device_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CarStateMsg::has_device_time() const {
  return _internal_has_device_time();
}
inline void CarStateMsg::clear_device_time() {
  _impl_.device_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline int32_t CarStateMsg::_internal_device_time() const {
  return _impl_.device_time_;
}
inline int32_t CarStateMsg::device_time() const {
  // @@protoc_insertion_point(field_get:hal.CarStateMsg.device_time)
  return _internal_device_time();
}
inline void CarStateMsg::_internal_set_device_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.device_time_ = value;
}
inline void CarStateMsg::set_device_time(int32_t value) {
  _internal_set_device_time(value);
  // @@protoc_insertion_point(field_set:hal.CarStateMsg.device_time)
}

// -------------------------------------------------------------------

// CarCommandMsg

// optional double steering_angle = 1;
inline bool CarCommandMsg::_internal_has_steering_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CarCommandMsg::has_steering_angle() const {
  return _internal_has_steering_angle();
}
inline void CarCommandMsg::clear_steering_angle() {
  _impl_.steering_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CarCommandMsg::_internal_steering_angle() const {
  return _impl_.steering_angle_;
}
inline double CarCommandMsg::steering_angle() const {
  // @@protoc_insertion_point(field_get:hal.CarCommandMsg.steering_angle)
  return _internal_steering_angle();
}
inline void CarCommandMsg::_internal_set_steering_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.steering_angle_ = value;
}
inline void CarCommandMsg::set_steering_angle(double value) {
  _internal_set_steering_angle(value);
  // @@protoc_insertion_point(field_set:hal.CarCommandMsg.steering_angle)
}

// optional double rear_steering_angle = 2;
inline bool CarCommandMsg::_internal_has_rear_steering_angle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CarCommandMsg::has_rear_steering_angle() const {
  return _internal_has_rear_steering_angle();
}
inline void CarCommandMsg::clear_rear_steering_angle() {
  _impl_.rear_steering_angle_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CarCommandMsg::_internal_rear_steering_angle() const {
  return _impl_.rear_steering_angle_;
}
inline double CarCommandMsg::rear_steering_angle() const {
  // @@protoc_insertion_point(field_get:hal.CarCommandMsg.rear_steering_angle)
  return _internal_rear_steering_angle();
}
inline void CarCommandMsg::_internal_set_rear_steering_angle(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rear_steering_angle_ = value;
}
inline void CarCommandMsg::set_rear_steering_angle(double value) {
  _internal_set_rear_steering_angle(value);
  // @@protoc_insertion_point(field_set:hal.CarCommandMsg.rear_steering_angle)
}

// optional double throttle_percent = 3;
inline bool CarCommandMsg::_internal_has_throttle_percent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CarCommandMsg::has_throttle_percent() const {
  return _internal_has_throttle_percent();
}
inline void CarCommandMsg::clear_throttle_percent() {
  _impl_.throttle_percent_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double CarCommandMsg::_internal_throttle_percent() const {
  return _impl_.throttle_percent_;
}
inline double CarCommandMsg::throttle_percent() const {
  // @@protoc_insertion_point(field_get:hal.CarCommandMsg.throttle_percent)
  return _internal_throttle_percent();
}
inline void CarCommandMsg::_internal_set_throttle_percent(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.throttle_percent_ = value;
}
inline void CarCommandMsg::set_throttle_percent(double value) {
  _internal_set_throttle_percent(value);
  // @@protoc_insertion_point(field_set:hal.CarCommandMsg.throttle_percent)
}

// optional int32 device_time = 4;
inline bool CarCommandMsg::_internal_has_device_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CarCommandMsg::has_device_time() const {
  return _internal_has_device_time();
}
inline void CarCommandMsg::clear_device_time() {
  _impl_.device_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CarCommandMsg::_internal_device_time() const {
  return _impl_.device_time_;
}
inline int32_t CarCommandMsg::device_time() const {
  // @@protoc_insertion_point(field_get:hal.CarCommandMsg.device_time)
  return _internal_device_time();
}
inline void CarCommandMsg::_internal_set_device_time(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.device_time_ = value;
}
inline void CarCommandMsg::set_device_time(int32_t value) {
  _internal_set_device_time(value);
  // @@protoc_insertion_point(field_set:hal.CarCommandMsg.device_time)
}

// -------------------------------------------------------------------

// CarSettingMsg

// optional int32 max_acc_limit = 1;
inline bool CarSettingMsg::_internal_has_max_acc_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CarSettingMsg::has_max_acc_limit() const {
  return _internal_has_max_acc_limit();
}
inline void CarSettingMsg::clear_max_acc_limit() {
  _impl_.max_acc_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CarSettingMsg::_internal_max_acc_limit() const {
  return _impl_.max_acc_limit_;
}
inline int32_t CarSettingMsg::max_acc_limit() const {
  // @@protoc_insertion_point(field_get:hal.CarSettingMsg.max_acc_limit)
  return _internal_max_acc_limit();
}
inline void CarSettingMsg::_internal_set_max_acc_limit(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_acc_limit_ = value;
}
inline void CarSettingMsg::set_max_acc_limit(int32_t value) {
  _internal_set_max_acc_limit(value);
  // @@protoc_insertion_point(field_set:hal.CarSettingMsg.max_acc_limit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Car_2eproto

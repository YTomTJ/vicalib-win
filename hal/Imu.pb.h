// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Imu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Imu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Imu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Imu_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Imu_2eproto;
namespace hal {
class ImuMsg;
struct ImuMsgDefaultTypeInternal;
extern ImuMsgDefaultTypeInternal _ImuMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::ImuMsg* Arena::CreateMaybeMessage<::hal::ImuMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class ImuMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.ImuMsg) */ {
 public:
  inline ImuMsg() : ImuMsg(nullptr) {}
  ~ImuMsg() override;
  explicit PROTOBUF_CONSTEXPR ImuMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImuMsg(const ImuMsg& from);
  ImuMsg(ImuMsg&& from) noexcept
    : ImuMsg() {
    *this = ::std::move(from);
  }

  inline ImuMsg& operator=(const ImuMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImuMsg& operator=(ImuMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImuMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImuMsg* internal_default_instance() {
    return reinterpret_cast<const ImuMsg*>(
               &_ImuMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImuMsg& a, ImuMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ImuMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImuMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImuMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImuMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImuMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImuMsg& from) {
    ImuMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImuMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.ImuMsg";
  }
  protected:
  explicit ImuMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelFieldNumber = 4,
    kGyroFieldNumber = 5,
    kMagFieldNumber = 6,
    kDeviceTimeFieldNumber = 2,
    kSystemTimeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .hal.VectorMsg accel = 4;
  bool has_accel() const;
  private:
  bool _internal_has_accel() const;
  public:
  void clear_accel();
  const ::hal::VectorMsg& accel() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_accel();
  ::hal::VectorMsg* mutable_accel();
  void set_allocated_accel(::hal::VectorMsg* accel);
  private:
  const ::hal::VectorMsg& _internal_accel() const;
  ::hal::VectorMsg* _internal_mutable_accel();
  public:
  void unsafe_arena_set_allocated_accel(
      ::hal::VectorMsg* accel);
  ::hal::VectorMsg* unsafe_arena_release_accel();

  // optional .hal.VectorMsg gyro = 5;
  bool has_gyro() const;
  private:
  bool _internal_has_gyro() const;
  public:
  void clear_gyro();
  const ::hal::VectorMsg& gyro() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_gyro();
  ::hal::VectorMsg* mutable_gyro();
  void set_allocated_gyro(::hal::VectorMsg* gyro);
  private:
  const ::hal::VectorMsg& _internal_gyro() const;
  ::hal::VectorMsg* _internal_mutable_gyro();
  public:
  void unsafe_arena_set_allocated_gyro(
      ::hal::VectorMsg* gyro);
  ::hal::VectorMsg* unsafe_arena_release_gyro();

  // optional .hal.VectorMsg mag = 6;
  bool has_mag() const;
  private:
  bool _internal_has_mag() const;
  public:
  void clear_mag();
  const ::hal::VectorMsg& mag() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_mag();
  ::hal::VectorMsg* mutable_mag();
  void set_allocated_mag(::hal::VectorMsg* mag);
  private:
  const ::hal::VectorMsg& _internal_mag() const;
  ::hal::VectorMsg* _internal_mutable_mag();
  public:
  void unsafe_arena_set_allocated_mag(
      ::hal::VectorMsg* mag);
  ::hal::VectorMsg* unsafe_arena_release_mag();

  // optional double device_time = 2;
  bool has_device_time() const;
  private:
  bool _internal_has_device_time() const;
  public:
  void clear_device_time();
  double device_time() const;
  void set_device_time(double value);
  private:
  double _internal_device_time() const;
  void _internal_set_device_time(double value);
  public:

  // optional double system_time = 3;
  bool has_system_time() const;
  private:
  bool _internal_has_system_time() const;
  public:
  void clear_system_time();
  double system_time() const;
  void set_system_time(double value);
  private:
  double _internal_system_time() const;
  void _internal_set_system_time(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.ImuMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hal::VectorMsg* accel_;
    ::hal::VectorMsg* gyro_;
    ::hal::VectorMsg* mag_;
    double device_time_;
    double system_time_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Imu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImuMsg

// optional int32 id = 1;
inline bool ImuMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ImuMsg::has_id() const {
  return _internal_has_id();
}
inline void ImuMsg::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ImuMsg::_internal_id() const {
  return _impl_.id_;
}
inline int32_t ImuMsg::id() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.id)
  return _internal_id();
}
inline void ImuMsg::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.id_ = value;
}
inline void ImuMsg::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hal.ImuMsg.id)
}

// optional double device_time = 2;
inline bool ImuMsg::_internal_has_device_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ImuMsg::has_device_time() const {
  return _internal_has_device_time();
}
inline void ImuMsg::clear_device_time() {
  _impl_.device_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ImuMsg::_internal_device_time() const {
  return _impl_.device_time_;
}
inline double ImuMsg::device_time() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.device_time)
  return _internal_device_time();
}
inline void ImuMsg::_internal_set_device_time(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.device_time_ = value;
}
inline void ImuMsg::set_device_time(double value) {
  _internal_set_device_time(value);
  // @@protoc_insertion_point(field_set:hal.ImuMsg.device_time)
}

// optional double system_time = 3;
inline bool ImuMsg::_internal_has_system_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ImuMsg::has_system_time() const {
  return _internal_has_system_time();
}
inline void ImuMsg::clear_system_time() {
  _impl_.system_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ImuMsg::_internal_system_time() const {
  return _impl_.system_time_;
}
inline double ImuMsg::system_time() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.system_time)
  return _internal_system_time();
}
inline void ImuMsg::_internal_set_system_time(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.system_time_ = value;
}
inline void ImuMsg::set_system_time(double value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:hal.ImuMsg.system_time)
}

// optional .hal.VectorMsg accel = 4;
inline bool ImuMsg::_internal_has_accel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.accel_ != nullptr);
  return value;
}
inline bool ImuMsg::has_accel() const {
  return _internal_has_accel();
}
inline const ::hal::VectorMsg& ImuMsg::_internal_accel() const {
  const ::hal::VectorMsg* p = _impl_.accel_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& ImuMsg::accel() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.accel)
  return _internal_accel();
}
inline void ImuMsg::unsafe_arena_set_allocated_accel(
    ::hal::VectorMsg* accel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  _impl_.accel_ = accel;
  if (accel) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.ImuMsg.accel)
}
inline ::hal::VectorMsg* ImuMsg::release_accel() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::unsafe_arena_release_accel() {
  // @@protoc_insertion_point(field_release:hal.ImuMsg.accel)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.accel_;
  _impl_.accel_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::_internal_mutable_accel() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.accel_ = p;
  }
  return _impl_.accel_;
}
inline ::hal::VectorMsg* ImuMsg::mutable_accel() {
  ::hal::VectorMsg* _msg = _internal_mutable_accel();
  // @@protoc_insertion_point(field_mutable:hal.ImuMsg.accel)
  return _msg;
}
inline void ImuMsg::set_allocated_accel(::hal::VectorMsg* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.accel_);
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel));
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:hal.ImuMsg.accel)
}

// optional .hal.VectorMsg gyro = 5;
inline bool ImuMsg::_internal_has_gyro() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gyro_ != nullptr);
  return value;
}
inline bool ImuMsg::has_gyro() const {
  return _internal_has_gyro();
}
inline const ::hal::VectorMsg& ImuMsg::_internal_gyro() const {
  const ::hal::VectorMsg* p = _impl_.gyro_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& ImuMsg::gyro() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.gyro)
  return _internal_gyro();
}
inline void ImuMsg::unsafe_arena_set_allocated_gyro(
    ::hal::VectorMsg* gyro) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gyro_);
  }
  _impl_.gyro_ = gyro;
  if (gyro) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.ImuMsg.gyro)
}
inline ::hal::VectorMsg* ImuMsg::release_gyro() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::VectorMsg* temp = _impl_.gyro_;
  _impl_.gyro_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::unsafe_arena_release_gyro() {
  // @@protoc_insertion_point(field_release:hal.ImuMsg.gyro)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::VectorMsg* temp = _impl_.gyro_;
  _impl_.gyro_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::_internal_mutable_gyro() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gyro_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.gyro_ = p;
  }
  return _impl_.gyro_;
}
inline ::hal::VectorMsg* ImuMsg::mutable_gyro() {
  ::hal::VectorMsg* _msg = _internal_mutable_gyro();
  // @@protoc_insertion_point(field_mutable:hal.ImuMsg.gyro)
  return _msg;
}
inline void ImuMsg::set_allocated_gyro(::hal::VectorMsg* gyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gyro_);
  }
  if (gyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro));
    if (message_arena != submessage_arena) {
      gyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:hal.ImuMsg.gyro)
}

// optional .hal.VectorMsg mag = 6;
inline bool ImuMsg::_internal_has_mag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mag_ != nullptr);
  return value;
}
inline bool ImuMsg::has_mag() const {
  return _internal_has_mag();
}
inline const ::hal::VectorMsg& ImuMsg::_internal_mag() const {
  const ::hal::VectorMsg* p = _impl_.mag_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& ImuMsg::mag() const {
  // @@protoc_insertion_point(field_get:hal.ImuMsg.mag)
  return _internal_mag();
}
inline void ImuMsg::unsafe_arena_set_allocated_mag(
    ::hal::VectorMsg* mag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mag_);
  }
  _impl_.mag_ = mag;
  if (mag) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.ImuMsg.mag)
}
inline ::hal::VectorMsg* ImuMsg::release_mag() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hal::VectorMsg* temp = _impl_.mag_;
  _impl_.mag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::unsafe_arena_release_mag() {
  // @@protoc_insertion_point(field_release:hal.ImuMsg.mag)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::hal::VectorMsg* temp = _impl_.mag_;
  _impl_.mag_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* ImuMsg::_internal_mutable_mag() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.mag_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.mag_ = p;
  }
  return _impl_.mag_;
}
inline ::hal::VectorMsg* ImuMsg::mutable_mag() {
  ::hal::VectorMsg* _msg = _internal_mutable_mag();
  // @@protoc_insertion_point(field_mutable:hal.ImuMsg.mag)
  return _msg;
}
inline void ImuMsg::set_allocated_mag(::hal::VectorMsg* mag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mag_);
  }
  if (mag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mag));
    if (message_arena != submessage_arena) {
      mag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.mag_ = mag;
  // @@protoc_insertion_point(field_set_allocated:hal.ImuMsg.mag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Imu_2eproto

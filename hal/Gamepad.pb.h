// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Gamepad.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Gamepad_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Gamepad_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Gamepad_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Gamepad_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Gamepad_2eproto;
namespace hal {
class GamepadMsg;
struct GamepadMsgDefaultTypeInternal;
extern GamepadMsgDefaultTypeInternal _GamepadMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::GamepadMsg* Arena::CreateMaybeMessage<::hal::GamepadMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class GamepadMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.GamepadMsg) */ {
 public:
  inline GamepadMsg() : GamepadMsg(nullptr) {}
  ~GamepadMsg() override;
  explicit PROTOBUF_CONSTEXPR GamepadMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GamepadMsg(const GamepadMsg& from);
  GamepadMsg(GamepadMsg&& from) noexcept
    : GamepadMsg() {
    *this = ::std::move(from);
  }

  inline GamepadMsg& operator=(const GamepadMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline GamepadMsg& operator=(GamepadMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GamepadMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const GamepadMsg* internal_default_instance() {
    return reinterpret_cast<const GamepadMsg*>(
               &_GamepadMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GamepadMsg& a, GamepadMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(GamepadMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GamepadMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GamepadMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GamepadMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GamepadMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GamepadMsg& from) {
    GamepadMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GamepadMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.GamepadMsg";
  }
  protected:
  explicit GamepadMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kButtonsFieldNumber = 7,
    kAxesFieldNumber = 8,
    kDeviceIdFieldNumber = 1,
    kVendorIdFieldNumber = 2,
    kProductIdFieldNumber = 3,
    kNumButtonsFieldNumber = 4,
    kSystemTimeFieldNumber = 6,
    kNumAxesFieldNumber = 5,
  };
  // optional .hal.VectorMsg buttons = 7;
  bool has_buttons() const;
  private:
  bool _internal_has_buttons() const;
  public:
  void clear_buttons();
  const ::hal::VectorMsg& buttons() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_buttons();
  ::hal::VectorMsg* mutable_buttons();
  void set_allocated_buttons(::hal::VectorMsg* buttons);
  private:
  const ::hal::VectorMsg& _internal_buttons() const;
  ::hal::VectorMsg* _internal_mutable_buttons();
  public:
  void unsafe_arena_set_allocated_buttons(
      ::hal::VectorMsg* buttons);
  ::hal::VectorMsg* unsafe_arena_release_buttons();

  // optional .hal.VectorMsg axes = 8;
  bool has_axes() const;
  private:
  bool _internal_has_axes() const;
  public:
  void clear_axes();
  const ::hal::VectorMsg& axes() const;
  PROTOBUF_NODISCARD ::hal::VectorMsg* release_axes();
  ::hal::VectorMsg* mutable_axes();
  void set_allocated_axes(::hal::VectorMsg* axes);
  private:
  const ::hal::VectorMsg& _internal_axes() const;
  ::hal::VectorMsg* _internal_mutable_axes();
  public:
  void unsafe_arena_set_allocated_axes(
      ::hal::VectorMsg* axes);
  ::hal::VectorMsg* unsafe_arena_release_axes();

  // optional int32 device_id = 1;
  bool has_device_id() const;
  private:
  bool _internal_has_device_id() const;
  public:
  void clear_device_id();
  int32_t device_id() const;
  void set_device_id(int32_t value);
  private:
  int32_t _internal_device_id() const;
  void _internal_set_device_id(int32_t value);
  public:

  // optional int32 vendor_id = 2;
  bool has_vendor_id() const;
  private:
  bool _internal_has_vendor_id() const;
  public:
  void clear_vendor_id();
  int32_t vendor_id() const;
  void set_vendor_id(int32_t value);
  private:
  int32_t _internal_vendor_id() const;
  void _internal_set_vendor_id(int32_t value);
  public:

  // optional int32 product_id = 3;
  bool has_product_id() const;
  private:
  bool _internal_has_product_id() const;
  public:
  void clear_product_id();
  int32_t product_id() const;
  void set_product_id(int32_t value);
  private:
  int32_t _internal_product_id() const;
  void _internal_set_product_id(int32_t value);
  public:

  // optional int32 num_buttons = 4;
  bool has_num_buttons() const;
  private:
  bool _internal_has_num_buttons() const;
  public:
  void clear_num_buttons();
  int32_t num_buttons() const;
  void set_num_buttons(int32_t value);
  private:
  int32_t _internal_num_buttons() const;
  void _internal_set_num_buttons(int32_t value);
  public:

  // optional double system_time = 6;
  bool has_system_time() const;
  private:
  bool _internal_has_system_time() const;
  public:
  void clear_system_time();
  double system_time() const;
  void set_system_time(double value);
  private:
  double _internal_system_time() const;
  void _internal_set_system_time(double value);
  public:

  // optional int32 num_axes = 5;
  bool has_num_axes() const;
  private:
  bool _internal_has_num_axes() const;
  public:
  void clear_num_axes();
  int32_t num_axes() const;
  void set_num_axes(int32_t value);
  private:
  int32_t _internal_num_axes() const;
  void _internal_set_num_axes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.GamepadMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::hal::VectorMsg* buttons_;
    ::hal::VectorMsg* axes_;
    int32_t device_id_;
    int32_t vendor_id_;
    int32_t product_id_;
    int32_t num_buttons_;
    double system_time_;
    int32_t num_axes_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Gamepad_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GamepadMsg

// optional int32 device_id = 1;
inline bool GamepadMsg::_internal_has_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GamepadMsg::has_device_id() const {
  return _internal_has_device_id();
}
inline void GamepadMsg::clear_device_id() {
  _impl_.device_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t GamepadMsg::_internal_device_id() const {
  return _impl_.device_id_;
}
inline int32_t GamepadMsg::device_id() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.device_id)
  return _internal_device_id();
}
inline void GamepadMsg::_internal_set_device_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.device_id_ = value;
}
inline void GamepadMsg::set_device_id(int32_t value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.device_id)
}

// optional int32 vendor_id = 2;
inline bool GamepadMsg::_internal_has_vendor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GamepadMsg::has_vendor_id() const {
  return _internal_has_vendor_id();
}
inline void GamepadMsg::clear_vendor_id() {
  _impl_.vendor_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t GamepadMsg::_internal_vendor_id() const {
  return _impl_.vendor_id_;
}
inline int32_t GamepadMsg::vendor_id() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.vendor_id)
  return _internal_vendor_id();
}
inline void GamepadMsg::_internal_set_vendor_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.vendor_id_ = value;
}
inline void GamepadMsg::set_vendor_id(int32_t value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.vendor_id)
}

// optional int32 product_id = 3;
inline bool GamepadMsg::_internal_has_product_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GamepadMsg::has_product_id() const {
  return _internal_has_product_id();
}
inline void GamepadMsg::clear_product_id() {
  _impl_.product_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t GamepadMsg::_internal_product_id() const {
  return _impl_.product_id_;
}
inline int32_t GamepadMsg::product_id() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.product_id)
  return _internal_product_id();
}
inline void GamepadMsg::_internal_set_product_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.product_id_ = value;
}
inline void GamepadMsg::set_product_id(int32_t value) {
  _internal_set_product_id(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.product_id)
}

// optional int32 num_buttons = 4;
inline bool GamepadMsg::_internal_has_num_buttons() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GamepadMsg::has_num_buttons() const {
  return _internal_has_num_buttons();
}
inline void GamepadMsg::clear_num_buttons() {
  _impl_.num_buttons_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t GamepadMsg::_internal_num_buttons() const {
  return _impl_.num_buttons_;
}
inline int32_t GamepadMsg::num_buttons() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.num_buttons)
  return _internal_num_buttons();
}
inline void GamepadMsg::_internal_set_num_buttons(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.num_buttons_ = value;
}
inline void GamepadMsg::set_num_buttons(int32_t value) {
  _internal_set_num_buttons(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.num_buttons)
}

// optional int32 num_axes = 5;
inline bool GamepadMsg::_internal_has_num_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GamepadMsg::has_num_axes() const {
  return _internal_has_num_axes();
}
inline void GamepadMsg::clear_num_axes() {
  _impl_.num_axes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline int32_t GamepadMsg::_internal_num_axes() const {
  return _impl_.num_axes_;
}
inline int32_t GamepadMsg::num_axes() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.num_axes)
  return _internal_num_axes();
}
inline void GamepadMsg::_internal_set_num_axes(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.num_axes_ = value;
}
inline void GamepadMsg::set_num_axes(int32_t value) {
  _internal_set_num_axes(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.num_axes)
}

// optional double system_time = 6;
inline bool GamepadMsg::_internal_has_system_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GamepadMsg::has_system_time() const {
  return _internal_has_system_time();
}
inline void GamepadMsg::clear_system_time() {
  _impl_.system_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double GamepadMsg::_internal_system_time() const {
  return _impl_.system_time_;
}
inline double GamepadMsg::system_time() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.system_time)
  return _internal_system_time();
}
inline void GamepadMsg::_internal_set_system_time(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.system_time_ = value;
}
inline void GamepadMsg::set_system_time(double value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:hal.GamepadMsg.system_time)
}

// optional .hal.VectorMsg buttons = 7;
inline bool GamepadMsg::_internal_has_buttons() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.buttons_ != nullptr);
  return value;
}
inline bool GamepadMsg::has_buttons() const {
  return _internal_has_buttons();
}
inline const ::hal::VectorMsg& GamepadMsg::_internal_buttons() const {
  const ::hal::VectorMsg* p = _impl_.buttons_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& GamepadMsg::buttons() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.buttons)
  return _internal_buttons();
}
inline void GamepadMsg::unsafe_arena_set_allocated_buttons(
    ::hal::VectorMsg* buttons) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buttons_);
  }
  _impl_.buttons_ = buttons;
  if (buttons) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.GamepadMsg.buttons)
}
inline ::hal::VectorMsg* GamepadMsg::release_buttons() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.buttons_;
  _impl_.buttons_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* GamepadMsg::unsafe_arena_release_buttons() {
  // @@protoc_insertion_point(field_release:hal.GamepadMsg.buttons)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hal::VectorMsg* temp = _impl_.buttons_;
  _impl_.buttons_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* GamepadMsg::_internal_mutable_buttons() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.buttons_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.buttons_ = p;
  }
  return _impl_.buttons_;
}
inline ::hal::VectorMsg* GamepadMsg::mutable_buttons() {
  ::hal::VectorMsg* _msg = _internal_mutable_buttons();
  // @@protoc_insertion_point(field_mutable:hal.GamepadMsg.buttons)
  return _msg;
}
inline void GamepadMsg::set_allocated_buttons(::hal::VectorMsg* buttons) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buttons_);
  }
  if (buttons) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(buttons));
    if (message_arena != submessage_arena) {
      buttons = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buttons, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.buttons_ = buttons;
  // @@protoc_insertion_point(field_set_allocated:hal.GamepadMsg.buttons)
}

// optional .hal.VectorMsg axes = 8;
inline bool GamepadMsg::_internal_has_axes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axes_ != nullptr);
  return value;
}
inline bool GamepadMsg::has_axes() const {
  return _internal_has_axes();
}
inline const ::hal::VectorMsg& GamepadMsg::_internal_axes() const {
  const ::hal::VectorMsg* p = _impl_.axes_;
  return p != nullptr ? *p : reinterpret_cast<const ::hal::VectorMsg&>(
      ::hal::_VectorMsg_default_instance_);
}
inline const ::hal::VectorMsg& GamepadMsg::axes() const {
  // @@protoc_insertion_point(field_get:hal.GamepadMsg.axes)
  return _internal_axes();
}
inline void GamepadMsg::unsafe_arena_set_allocated_axes(
    ::hal::VectorMsg* axes) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axes_);
  }
  _impl_.axes_ = axes;
  if (axes) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hal.GamepadMsg.axes)
}
inline ::hal::VectorMsg* GamepadMsg::release_axes() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::VectorMsg* temp = _impl_.axes_;
  _impl_.axes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::hal::VectorMsg* GamepadMsg::unsafe_arena_release_axes() {
  // @@protoc_insertion_point(field_release:hal.GamepadMsg.axes)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::hal::VectorMsg* temp = _impl_.axes_;
  _impl_.axes_ = nullptr;
  return temp;
}
inline ::hal::VectorMsg* GamepadMsg::_internal_mutable_axes() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.axes_ == nullptr) {
    auto* p = CreateMaybeMessage<::hal::VectorMsg>(GetArenaForAllocation());
    _impl_.axes_ = p;
  }
  return _impl_.axes_;
}
inline ::hal::VectorMsg* GamepadMsg::mutable_axes() {
  ::hal::VectorMsg* _msg = _internal_mutable_axes();
  // @@protoc_insertion_point(field_mutable:hal.GamepadMsg.axes)
  return _msg;
}
inline void GamepadMsg::set_allocated_axes(::hal::VectorMsg* axes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axes_);
  }
  if (axes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(axes));
    if (message_arena != submessage_arena) {
      axes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axes, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.axes_ = axes;
  // @@protoc_insertion_point(field_set_allocated:hal.GamepadMsg.axes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Gamepad_2eproto

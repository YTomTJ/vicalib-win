// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Camera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Camera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Image.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Camera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Camera_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Camera_2eproto;
namespace hal {
class CameraMsg;
struct CameraMsgDefaultTypeInternal;
extern CameraMsgDefaultTypeInternal _CameraMsg_default_instance_;
}  // namespace hal
PROTOBUF_NAMESPACE_OPEN
template<> ::hal::CameraMsg* Arena::CreateMaybeMessage<::hal::CameraMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hal {

// ===================================================================

class CameraMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hal.CameraMsg) */ {
 public:
  inline CameraMsg() : CameraMsg(nullptr) {}
  ~CameraMsg() override;
  explicit PROTOBUF_CONSTEXPR CameraMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraMsg(const CameraMsg& from);
  CameraMsg(CameraMsg&& from) noexcept
    : CameraMsg() {
    *this = ::std::move(from);
  }

  inline CameraMsg& operator=(const CameraMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraMsg& operator=(CameraMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraMsg* internal_default_instance() {
    return reinterpret_cast<const CameraMsg*>(
               &_CameraMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CameraMsg& a, CameraMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CameraMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CameraMsg& from) {
    CameraMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hal.CameraMsg";
  }
  protected:
  explicit CameraMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFieldNumber = 3,
    kDeviceTimeFieldNumber = 2,
    kSystemTimeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // repeated .hal.ImageMsg image = 3;
  int image_size() const;
  private:
  int _internal_image_size() const;
  public:
  void clear_image();
  ::hal::ImageMsg* mutable_image(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hal::ImageMsg >*
      mutable_image();
  private:
  const ::hal::ImageMsg& _internal_image(int index) const;
  ::hal::ImageMsg* _internal_add_image();
  public:
  const ::hal::ImageMsg& image(int index) const;
  ::hal::ImageMsg* add_image();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hal::ImageMsg >&
      image() const;

  // optional double device_time = 2;
  bool has_device_time() const;
  private:
  bool _internal_has_device_time() const;
  public:
  void clear_device_time();
  double device_time() const;
  void set_device_time(double value);
  private:
  double _internal_device_time() const;
  void _internal_set_device_time(double value);
  public:

  // optional double system_time = 4;
  bool has_system_time() const;
  private:
  bool _internal_has_system_time() const;
  public:
  void clear_system_time();
  double system_time() const;
  void set_system_time(double value);
  private:
  double _internal_system_time() const;
  void _internal_set_system_time(double value);
  public:

  // optional int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:hal.CameraMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hal::ImageMsg > image_;
    double device_time_;
    double system_time_;
    int32_t id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Camera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CameraMsg

// optional int32 id = 1;
inline bool CameraMsg::_internal_has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CameraMsg::has_id() const {
  return _internal_has_id();
}
inline void CameraMsg::clear_id() {
  _impl_.id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CameraMsg::_internal_id() const {
  return _impl_.id_;
}
inline int32_t CameraMsg::id() const {
  // @@protoc_insertion_point(field_get:hal.CameraMsg.id)
  return _internal_id();
}
inline void CameraMsg::_internal_set_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.id_ = value;
}
inline void CameraMsg::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:hal.CameraMsg.id)
}

// optional double device_time = 2;
inline bool CameraMsg::_internal_has_device_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CameraMsg::has_device_time() const {
  return _internal_has_device_time();
}
inline void CameraMsg::clear_device_time() {
  _impl_.device_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double CameraMsg::_internal_device_time() const {
  return _impl_.device_time_;
}
inline double CameraMsg::device_time() const {
  // @@protoc_insertion_point(field_get:hal.CameraMsg.device_time)
  return _internal_device_time();
}
inline void CameraMsg::_internal_set_device_time(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_time_ = value;
}
inline void CameraMsg::set_device_time(double value) {
  _internal_set_device_time(value);
  // @@protoc_insertion_point(field_set:hal.CameraMsg.device_time)
}

// repeated .hal.ImageMsg image = 3;
inline int CameraMsg::_internal_image_size() const {
  return _impl_.image_.size();
}
inline int CameraMsg::image_size() const {
  return _internal_image_size();
}
inline ::hal::ImageMsg* CameraMsg::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:hal.CameraMsg.image)
  return _impl_.image_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hal::ImageMsg >*
CameraMsg::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:hal.CameraMsg.image)
  return &_impl_.image_;
}
inline const ::hal::ImageMsg& CameraMsg::_internal_image(int index) const {
  return _impl_.image_.Get(index);
}
inline const ::hal::ImageMsg& CameraMsg::image(int index) const {
  // @@protoc_insertion_point(field_get:hal.CameraMsg.image)
  return _internal_image(index);
}
inline ::hal::ImageMsg* CameraMsg::_internal_add_image() {
  return _impl_.image_.Add();
}
inline ::hal::ImageMsg* CameraMsg::add_image() {
  ::hal::ImageMsg* _add = _internal_add_image();
  // @@protoc_insertion_point(field_add:hal.CameraMsg.image)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::hal::ImageMsg >&
CameraMsg::image() const {
  // @@protoc_insertion_point(field_list:hal.CameraMsg.image)
  return _impl_.image_;
}

// optional double system_time = 4;
inline bool CameraMsg::_internal_has_system_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CameraMsg::has_system_time() const {
  return _internal_has_system_time();
}
inline void CameraMsg::clear_system_time() {
  _impl_.system_time_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double CameraMsg::_internal_system_time() const {
  return _impl_.system_time_;
}
inline double CameraMsg::system_time() const {
  // @@protoc_insertion_point(field_get:hal.CameraMsg.system_time)
  return _internal_system_time();
}
inline void CameraMsg::_internal_set_system_time(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.system_time_ = value;
}
inline void CameraMsg::set_system_time(double value) {
  _internal_set_system_time(value);
  // @@protoc_insertion_point(field_set:hal.CameraMsg.system_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hal

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Camera_2eproto
